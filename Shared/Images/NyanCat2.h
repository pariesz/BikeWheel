#pragma once
#ifdef SIMULATION
#include "Arduino_Mock.h"
#else
#include <avr/pgmspace.h>
#endif

#include "../Image.h"

namespace NyanCat2_data {
	const uint16_t arcs[] PROGMEM {
		  0x000C, 0x0C02, 0x199C, 0x326D, 0x3730, 0x459D, 0x4C0C, 0x766D, 0x88CC
		, 0x000C, 0x1182, 0x169C, 0x30D0, 0x4ECD, 0x549C, 0x6CAD, 0x74B0, 0x8A9D, 0x929C
		, 0x000C, 0x3200, 0x543D, 0x563C, 0x660D, 0x6A90, 0x7C61, 0x8A30, 0x94BD, 0x995C
		, 0x000C, 0x2CFD, 0x3080, 0x3552, 0x44F1, 0x4F20, 0x53EC, 0x61BD, 0x6550, 0x7CB2, 0x8C40, 0x9A1D, 0x9DAC, 0xA4DD, 0xA61C, 0xB04D, 0xB800, 0xCA0D, 0xD0AC
		, 0x000C, 0x272D, 0x2950, 0x3512, 0x5100, 0x558D, 0x57CC, 0x5E7D, 0x60B0, 0x7CA1, 0x87D2, 0x8B20, 0x9EBD, 0xA2A0, 0xA69D, 0xA83C, 0xA95D, 0xAD40, 0xD2BD, 0xD61C, 0xEE12, 0xF67C
		, 0x000C, 0x231D, 0x2520, 0x2F71, 0x34A2, 0x45AC, 0x5000, 0x573C, 0x5BDD, 0x5DE0, 0x9EF1, 0xA080, 0xB9C2, 0xBC61, 0xBD62, 0xC4A0, 0xC9C7, 0xCD60, 0xD84D, 0xDA5C, 0xEEF2, 0xF73C
		, 0x000C, 0x0BF2, 0x0F5C, 0x201D, 0x2180, 0x2A21, 0x2D12, 0x450C, 0x4E92, 0x5101, 0x5360, 0x555D, 0x574C, 0x59AD, 0x5B90, 0x9C41, 0x9DB2, 0xA181, 0xA2F0, 0xAC9B, 0xAF7A, 0xB440, 0xBA02, 0xC480, 0xCA46, 0xCE25, 0xD007, 0xD360, 0xDB9D, 0xDD7C, 0xF022, 0xF47C
		, 0x000C, 0x0B52, 0x121C, 0x1FBD, 0x2110, 0x2681, 0x2852, 0x44DC, 0x4D72, 0x5350, 0x585D, 0x5940, 0x9B62, 0xA401, 0xA560, 0xA88B, 0xAB4A, 0xB530, 0xBAA2, 0xC430, 0xC9A6, 0xD155, 0xD5D4, 0xD7A0, 0xDEED, 0xE04C
		, 0x000C, 0x0B02, 0x10FC, 0x21F0, 0x24E2, 0x3B0A, 0x4011, 0x44CC, 0x4CD2, 0x51E1, 0x53A0, 0x9AF1, 0x9D12, 0xA590, 0xA7BB, 0xA8FA, 0xB5B0, 0xBAC2, 0xC420, 0xC8C6, 0xD075, 0xD954, 0xDB70, 0xE16D, 0xE2BC
		, 0x000C, 0x1AC2, 0x1C0C, 0x20C0, 0x2531, 0x2662, 0x3B3A, 0x3F90, 0x44C2, 0x5530, 0x9E01, 0x9F92, 0xA201, 0xA330, 0xAA0A, 0xB660, 0xB8C9, 0xBA00, 0xBF32, 0xC390, 0xCAC7, 0xCCC6, 0xCF35, 0xDD30, 0xE46C
		, 0x000C, 0x1922, 0x1E7C, 0x212D, 0x2240, 0x26D1, 0x2802, 0x3B6A, 0x3F90, 0x4492, 0x5490, 0xA061, 0xA120, 0xA6DD, 0xA80C, 0xAAAA, 0xB738, 0xBA40, 0xBF32, 0xC3C0, 0xCC96, 0xCE75, 0xDB04, 0xDF90, 0xE55D, 0xE67C
		, 0x0000, 0x056D, 0x0B8C, 0x1882, 0x1E5C, 0x230D, 0x2410, 0x2871, 0x2A30, 0x2D22, 0x3B90, 0x4432, 0x4721, 0x4C82, 0x5360, 0x5761, 0x5870, 0xA44D, 0xA5BC, 0xABDA, 0xB7C8, 0xBAA0, 0xBF02, 0xC4C1, 0xC9D0, 0xCC56, 0xCDC5, 0xD954, 0xE1A0, 0xE77C, 0xEB6D, 0xEC2C, 0xF41D, 0xFA30
		, 0x0000, 0x0DBD, 0x10CC, 0x1B12, 0x1CCC, 0x24AD, 0x25B0, 0x266D, 0x27CC, 0x29C0, 0x2D31, 0x2F40, 0x31B2, 0x3BF0, 0x4432, 0x4740, 0x4E72, 0x5290, 0x5702, 0x5971, 0x5A70, 0xA21D, 0xA32C, 0xAD1A, 0xB808, 0xBAC0, 0xBF32, 0xC980, 0xCEA5, 0xD7E4, 0xE330, 0xE80D, 0xEA60, 0xED2C, 0xEEDD, 0xF1F0
		, 0x0000, 0x126D, 0x150C, 0x2B0D, 0x2CBC, 0x2DAD, 0x2E50, 0x31F1, 0x33E0, 0x3632, 0x4990, 0x4DE2, 0x5170, 0x5511, 0x5612, 0x5901, 0x5A00, 0xA15D, 0xA25C, 0xADDA, 0xB858, 0xBAA9, 0xBBA0, 0xBBF9, 0xBE40, 0xC382, 0xC910, 0xCE65, 0xD6E4, 0xE4B0
		, 0x0000, 0x15FD, 0x17DC, 0x26E2, 0x2B9C, 0x2E6D, 0x314C, 0x323D, 0x3280, 0x36E2, 0x4960, 0x4D72, 0x50A0, 0x54B2, 0x57D1, 0x58C0, 0xA2DD, 0xA3CC, 0xAEBA, 0xB8C8, 0xBE60, 0xC321, 0xC4B2, 0xC8C0, 0xCDC5, 0xD5A4, 0xE370
		, 0x0000, 0x189D, 0x1A6C, 0x2742, 0x2C5C, 0x32F0, 0x3722, 0x4920, 0x4CB2, 0x5000, 0x53E2, 0x5780, 0xA44D, 0xA52C, 0xAFAA, 0xB8F8, 0xC230, 0xCD05, 0xD4D4, 0xE160
		, 0x0000, 0x1AED, 0x1C5C, 0x2872, 0x29FC, 0x3370, 0x3782, 0x4890, 0x4C52, 0x4F40, 0x5471, 0x5670, 0xA65C, 0xB02A, 0xB968, 0xC210, 0xC875, 0xC997, 0xCB14, 0xCC85, 0xD3B4, 0xDFE0
		, 0x0000, 0x1CDD, 0x1DFC, 0x3420, 0x37B2, 0x4551, 0x4860, 0x4BB2, 0x4E70, 0xA78C, 0xB0FA, 0xB988, 0xC227, 0xC846, 0xCA75, 0xD314, 0xDE20
		, 0x0000, 0x1EAD, 0x1FBC, 0x3470, 0x3832, 0x3F61, 0x42D2, 0x4540, 0x4B62, 0x4E00, 0xA7DD, 0xA89C, 0xB16A, 0xB9F8, 0xC236, 0xCA35, 0xD224, 0xDCD0
		, 0x0000, 0x204D, 0x214C, 0x335D, 0x34A0, 0x3882, 0x3FB0, 0x42D2, 0x47B0, 0x4AD2, 0x4D60, 0xA98C, 0xB21A, 0xBA18, 0xC257, 0xC466, 0xC9C5, 0xD184, 0xDB90
		, 0x0000, 0x218D, 0x228C, 0x2EFD, 0x30F0, 0x38A2, 0x3FA0, 0x42D2, 0x4790, 0x4A92, 0x4D00, 0xAA4C, 0xB27A, 0xBCE8, 0xC496, 0xC995, 0xD0C4, 0xDA70
		, 0x0000, 0x22CD, 0x23BC, 0x2C5D, 0x2E00, 0x3621, 0x3812, 0x4760, 0x4A12, 0x4C70, 0x4F92, 0x5081, 0x51B0, 0xAB2C, 0xB57A, 0xBCE8, 0xC456, 0xCB85, 0xD044, 0xD960, 0xF211, 0xF382, 0xF401, 0xF440
		, 0x0000, 0x23DD, 0x24CC, 0x25FD, 0x272C, 0x29ED, 0x2B50, 0x3682, 0x3F91, 0x4262, 0x4700, 0x49D2, 0x4C20, 0x4EF2, 0x51C0, 0x6F11, 0x70B2, 0x70F1, 0x7130, 0xABEC, 0xAD4D, 0xAE7C, 0xB5EA, 0xBCE8, 0xC426, 0xCB15, 0xD123, 0xD1E4, 0xD8A0, 0xF2F1, 0xF450
		, 0x0000, 0x24ED, 0x2520, 0x276D, 0x28F0, 0x3672, 0x3CCA, 0x3FB0, 0x4262, 0x4470, 0x4551, 0x46E0, 0x4962, 0x4BA0, 0x4E52, 0x5100, 0x6FA2, 0x7051, 0x7170, 0xAC0D, 0xAC30, 0xAEFC, 0xB62A, 0xBD28, 0xC416, 0xCAD5, 0xD194, 0xD7B0, 0xF681, 0xF890
		, 0x0000, 0x34C2, 0x3CDA, 0x3DEB, 0x3FA0, 0x4242, 0x4440, 0x4902, 0x4B30, 0x4DD1, 0x4E82, 0x5070, 0xA0B1, 0xA0E0, 0xAF8C, 0xB68A, 0xBD48, 0xC406, 0xCA95, 0xD114, 0xD770, 0xF0B1, 0xF1D0, 0xF6D1, 0xF890
		, 0x0000, 0x3542, 0x3D20, 0x4232, 0x4531, 0x48C2, 0x4AE0, 0x4F91, 0x5000, 0x98D1, 0x9A10, 0x9F61, 0xA002, 0xA1C0, 0xB02C, 0xB6CA, 0xBD58, 0xC3E6, 0xCA15, 0xD074, 0xD880, 0xF042, 0xF260
		, 0x0000, 0x3371, 0x34E2, 0x3D10, 0x4242, 0x4AB0, 0x9841, 0x98E2, 0x9AC1, 0x9B90, 0x9ED2, 0xA081, 0xA150, 0xB09C, 0xB6FA, 0xBD58, 0xC3B6, 0xC9E5, 0xD004, 0xD7D0, 0xF091, 0xF160, 0xF411, 0xF5E0
		, 0x0000, 0x33F2, 0x422C, 0x4582, 0x47F1, 0x49F2, 0x4A21, 0x4A50, 0x9971, 0x9A72, 0x9C11, 0x9CE0, 0x9D71, 0x9DE2, 0x9F71, 0xA010, 0xB10C, 0xB74A, 0xBD78, 0xC3A6, 0xC9A5, 0xCFA4, 0xD700, 0xF462, 0xF600
		, 0x0000, 0x3442, 0x421C, 0x4592, 0x47C0, 0x9AC1, 0x9BF2, 0x9C51, 0x9CF0, 0x9D51, 0x9E12, 0x9E81, 0x9F10, 0xB16C, 0xB77A, 0xBD88, 0xC386, 0xC965, 0xCF04, 0xD670
		, 0x0000, 0x3482, 0x3601, 0x3632, 0x3661, 0x3750, 0x3C72, 0x41FC, 0x4591, 0x47A0, 0x9C41, 0x9D30, 0x9D91, 0x9DF2, 0x9EB1, 0x9F40, 0xB1DC, 0xB7CA, 0xBDA8, 0xC386, 0xC905, 0xCEB4, 0xD5B0
		, 0x0000, 0x3CA2, 0x3E21, 0x3E82, 0x4171, 0x420D, 0x429C, 0x4550, 0x9B12, 0x9C61, 0x9CF0, 0x9D81, 0x9E32, 0x9FB1, 0xA070, 0xB22C, 0xB7EA, 0xBD98, 0xC356, 0xC8D5, 0xCE64, 0xD530
		, 0x0000, 0x9A32, 0x9C00, 0x9EC1, 0x9F72, 0xA0B1, 0xA170, 0xB29C, 0xB83A, 0xBD98, 0xC336, 0xC895, 0xCDD4, 0xD480
		, 0x0000, 0x9992, 0x9AC1, 0x9B50, 0x9FB1, 0xA062, 0xA0F1, 0xA170, 0xB2DC, 0xB85A, 0xBDC8, 0xC336, 0xC875, 0xCD94, 0xD410
		, 0x0000, 0x9991, 0x9AA0, 0xB34C, 0xB89A, 0xBDB8, 0xC306, 0xC825, 0xCD54, 0xD370
		, 0x0000, 0xB38C, 0xB8BA, 0xBDE8, 0xC316, 0xC7F5, 0xCD04, 0xD300
		, 0x0000, 0xB3BC, 0xB8CA, 0xBCB8, 0xC1A6, 0xC7D5, 0xCCC4, 0xD2A0
	}; // 1538 bytes

	const uint16_t row_ends[] PROGMEM {		
		0x0008, 0x0012, 0x001C, 0x002F, 0x0045, 0x005B, 0x007B, 0x0095, 
		0x00AE, 0x00C7, 0x00E1, 0x0103, 0x0127, 0x0145, 0x0160, 0x0174, 
		0x018A, 0x019B, 0x01AD, 0x01C0, 0x01D2, 0x01EA, 0x0209, 0x0227, 
		0x0240, 0x0257, 0x026F, 0x0288, 0x029C, 0x02B3, 0x02C9, 0x02D7, 
		0x02E6, 0x02F0, 0x02F8, 0x0300
	}; // 72 bytes

	const uint32_t colors[] PROGMEM {		
		0x00000000, 0x00888888, 0x00FFFFFF, 0x00FF0000, 0x00880000, 0x00FF8800, 
		0x00FFFF00, 0x00888800, 0x0000FF00, 0x00008800, 0x0000FFFF, 0x00008888, 
		0x00FF00FF, 0x00880088
	}; // 56 bytes
}

class NyanCat2 : public Image {
protected:
	inline uint16_t get_arc(uint16_t i) override {
		return pgm_read_word(&NyanCat2_data::arcs[i]);
	}

	inline uint16_t get_row_end(uint8_t row_index) override {
		return pgm_read_word(&NyanCat2_data::row_ends[row_index]);
	}

protected:
	const uint16_t angle_mask = 0xFFF0;
	const uint16_t color_mask = 0x000F;

	inline uint16_t get_angle(uint16_t arc) override {
		return arc & angle_mask;
	}

	inline uint32_t get_color(uint16_t arc) override {
		return pgm_read_dword(&(NyanCat2_data::colors[arc & color_mask]));
	}

public:
    NyanCat2() {
        Image::Initialise();
    }
};
