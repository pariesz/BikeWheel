#pragma once
#ifdef SIMULATION
#include "Arduino_Mock.h"
#else
#include <avr/pgmspace.h>
#endif

#include "../Image.h"

namespace HamsterRoll2Data {
	const uint16_t arcs[] PROGMEM {
		  0x0001, 0x0B30, 0xE0C9
		, 0x0001, 0x0F50, 0xDCF9
		, 0x0003, 0x0499, 0x1310, 0xD9D1, 0xF623
		, 0x0003, 0x0699, 0x1590, 0xD739, 0xF06B
		, 0x0003, 0x07D1, 0x1778, 0xD581, 0xECFB
		, 0x0003, 0x09C9, 0x18C0, 0xD421, 0xEA53
		, 0x0003, 0x0A11, 0x19E0, 0xD369, 0xE883
		, 0x0004, 0x039B, 0x0909, 0x1A40, 0xD2B1, 0xE713, 0xFDBC
		, 0x0001, 0x1A50, 0xD291, 0xE683, 0xF859
		, 0x0001, 0x1A60, 0xD261, 0xE79B, 0xF531
		, 0x0001, 0x1A48, 0xD249, 0xE863, 0xF369
		, 0x0001, 0x19F8, 0xD281, 0xE8E3, 0xF1E9
		, 0x0001, 0x1958, 0xD319, 0xE963, 0xF2A1
		, 0x0001, 0x034C, 0x0399, 0x03F4, 0x0541, 0x0594, 0x05E9, 0x18F8, 0xD3A1, 0xE9FB, 0xF579
		, 0x0003, 0x0879, 0x1828, 0xD411, 0xEA5B, 0xF194, 0xF1E3
		, 0x0003, 0x0991, 0x1760, 0xD4D1, 0xEA1B, 0xF01A, 0xF580, 0xF6B2, 0xF883
		, 0x0003, 0x0A19, 0x1690, 0xD5C1, 0xE96B, 0xEEA2, 0xF2F8, 0xF752, 0xF87B
		, 0x0003, 0x07C1, 0x15A0, 0xD661, 0xE86B, 0xEE3A, 0xF220, 0xF52A, 0xF7F3
		, 0x0003, 0x0224, 0x02E9, 0x14C0, 0xD6F9, 0xE77B, 0xEC8A, 0xED58, 0xEE22, 0xF198, 0xF2F2, 0xF733
		, 0x0001, 0x13D8, 0xD7B9, 0xE673, 0xEBD8, 0xEDEA, 0xF673, 0xFE71
		, 0x0001, 0x12E0, 0xD839, 0xE563, 0xEAD8, 0xEE1A, 0xF2D0, 0xF514, 0xF5CB, 0xFCC1
		, 0x0001, 0x11F8, 0xD8E9, 0xDDF4, 0xDE31, 0xDEEC, 0xDF29, 0xE433, 0xE9F0, 0xEE82, 0xF198, 0xF404, 0xF4BB, 0xFBE9
		, 0x0001, 0x1100, 0xDA01, 0xDABB, 0xE8F0, 0xEEFA, 0xF188, 0xF2F4, 0xF3A3, 0xFB19
		, 0x0001, 0x0FF8, 0xDADC, 0xDB83, 0xE820, 0xF1D4, 0xF27B, 0xF9B1
		, 0x0001, 0x0F08, 0xD92A, 0xDCE4, 0xDDC3, 0xE4BC, 0xE60B, 0xE758, 0xF19B, 0xF629
		, 0x0001, 0x0E38, 0xD292, 0xE02C, 0xE0CB, 0xE1A4, 0xE24A, 0xE6B8, 0xF0EC, 0xF1C2, 0xF30B, 0xF529
		, 0x0001, 0x0D28, 0xD2BA, 0xDC30, 0xE18A, 0xE610, 0xF373, 0xF479
		, 0x0001, 0x0BC8, 0xD3A2, 0xD7D0, 0xE19A, 0xE568, 0xF333, 0xF431
		, 0x0001, 0x03E2, 0x07F9, 0x0A20, 0xE162, 0xE4E0, 0xEFD4, 0xF062, 0xF0C8, 0xF2BB, 0xF3B1
		, 0x0001, 0x039A, 0x0978, 0xE142, 0xE450, 0xF043, 0xF0D4, 0xF193, 0xF3A9, 0xF868, 0xF9B9
		, 0x0001, 0x0352, 0x09C0, 0xE132, 0xE3C0, 0xF053, 0xF3D1, 0xF7E0, 0xFAD1
		, 0x0001, 0x036A, 0x09E8, 0xE0CA, 0xE320, 0xF0DB, 0xF21C, 0xF303, 0xF3E9, 0xF7E0, 0xFAC1
		, 0x0001, 0x032A, 0x09A8, 0xE05A, 0xE2A8, 0xF112, 0xF439, 0xF8F8, 0xF921
		, 0x0000, 0x00AA, 0x05F8, 0xDFA2, 0xE208, 0xF0EA, 0xF481, 0xFDF0
		, 0x0000, 0xE022, 0xE170, 0xF192, 0xF490, 0xF771, 0xFBA0
		, 0x0000
	}; // 550 bytes

	const uint16_t row_ends[] PROGMEM {		
		0x0002, 0x0005, 0x000A, 0x000F, 0x0014, 0x0019, 0x001E, 0x0025, 
		0x002A, 0x002F, 0x0034, 0x0039, 0x003E, 0x0049, 0x0050, 0x0059, 
		0x0062, 0x006B, 0x0077, 0x007F, 0x0089, 0x0097, 0x00A1, 0x00A9, 
		0x00B3, 0x00BF, 0x00C7, 0x00CF, 0x00DA, 0x00E5, 0x00EE, 0x00F9, 
		0x0102, 0x010A, 0x0111, 0x0112
	}; // 72 bytes

	const uint32_t colors[] PROGMEM {		
		0x00000000, 0x00FFCC00, 0x00FF5555, 0x00FFFFFF, 0xCCCCCCCC
	}; // 20 bytes
}

class HamsterRoll2 : public Image {
protected:
	inline uint16_t get_arc(uint16_t i) override {
		return pgm_read_word(&HamsterRoll2Data::arcs[i]);
	}

	inline uint16_t get_row_end(uint8_t row_index) override {
		return pgm_read_word(&HamsterRoll2Data::row_ends[row_index]);
	}

protected:
	const uint16_t angle_mask = 0xFFF8;
	const uint16_t color_mask = 0x0007;

	inline uint16_t get_angle(uint16_t arc) override {
		return arc & angle_mask;
	}

	inline uint32_t get_color(uint16_t arc) override {
		return pgm_read_dword(&(HamsterRoll2Data::colors[arc & color_mask]));
	}

public:
    HamsterRoll2() {
        Image::Initialise();
    }
};
