#pragma once
#ifdef SIMULATION
#include "Arduino_Mock.h"
#else
#include <avr/pgmspace.h>
#endif

#include "../Image.h"

namespace run2_data {
	const uint16_t arcs[] PROGMEM {
		  0x0000
		, 0x0000
		, 0x0000
		, 0x0000, 0x7449, 0x9248
		, 0x0000, 0x6D89, 0xA330
		, 0x0000, 0x6949, 0x831C, 0x84A1, 0xABD8
		, 0x0000, 0x6691, 0x7E8B, 0x8821, 0xB160
		, 0x0000, 0x6491, 0x7D83, 0x8861, 0xB538
		, 0x0000, 0x62E9, 0x7DAB, 0x8A61, 0xB760
		, 0x0000, 0x6261, 0x7E63, 0x8EC9, 0xBA00
		, 0x0000, 0x6181, 0x7E7B, 0x9121, 0xBB08
		, 0x0000, 0x6121, 0x7EBB, 0x9181, 0xBB62, 0xC240
		, 0x0000, 0x60A1, 0x7ECB, 0x90F1, 0xB90A, 0xC3A8
		, 0x0000, 0x6049, 0x7E83, 0x8CF9, 0x9E13, 0x9F0C, 0x9FB1, 0xB802, 0xC2E0
		, 0x0000, 0x6001, 0x7E6B, 0x8B99, 0x9AAB, 0xA321, 0xB732, 0xC140
		, 0x0000, 0x5FE9, 0x7E83, 0x8B61, 0x9A63, 0xA529, 0xB72A, 0xC158
		, 0x0000, 0x5FB9, 0x7EB3, 0x8B69, 0x9AC3, 0xA699, 0xB9B2, 0xC1C8
		, 0x0000, 0x5FB1, 0x7EC3, 0x8B81, 0x9B53, 0xA7C9, 0xBD6A, 0xC150
		, 0x0000, 0x5FA1, 0x682C, 0x69C3, 0x6F59, 0x7ECB, 0x8BD9, 0x9C5B, 0xA899, 0xBD22, 0xBFC8
		, 0x0000, 0x6001, 0x64E3, 0x7081, 0x7EF3, 0x8C61, 0x9DEB, 0xA9C9, 0xBCA2, 0xBE30
		, 0x0000, 0x60A9, 0x636B, 0x7151, 0x7F83, 0x8DA9, 0x9E93, 0xAB39, 0xBC22, 0xBD20
		, 0x0000, 0x63B2, 0x646C, 0x65DB, 0x7219, 0x7F83, 0x8FD4, 0x9089, 0x9E73, 0xAC91, 0xBBA8
		, 0x0000, 0x6642, 0x67AC, 0x690B, 0x72D1, 0x7F6B, 0x9424, 0x94D9, 0x9D3B, 0xAD11, 0xBB80
		, 0x0000, 0x695A, 0x6A0C, 0x6B2B, 0x73B9, 0x7EFB, 0x866C, 0x9173, 0x9344, 0x97FA, 0x986C, 0x98E2, 0x991C, 0x9B5B, 0xA254, 0xA50A, 0xA69C, 0xA74B, 0xACE9, 0xBB18
		, 0x0000, 0x6B82, 0x6C2C, 0x6D3A, 0x6D74, 0x6FA3, 0x75F9, 0x7D9B, 0x8264, 0x83EA, 0x8570, 0x93A2, 0x9BB4, 0x9E82, 0x9EBC, 0x9FD2, 0xA510, 0xA853, 0xACB1, 0xB488, 0xB681, 0xBAE0
		, 0x0000, 0x6C42, 0x70EC, 0x71FB, 0x77B9, 0x7A0C, 0x7AB3, 0x7F94, 0x810A, 0x81B0, 0x9572, 0x9AF0, 0x9EC2, 0xA480, 0xA92B, 0xAC91, 0xB468, 0xB6F9, 0xBA90
		, 0x0000, 0x6C72, 0x730B, 0x7CEC, 0x7E5A, 0x7F28, 0x95D2, 0x9A50, 0x9EAA, 0xA400, 0xA9C3, 0xAD11, 0xB4A8, 0xB6F1, 0xBA38
		, 0x0000, 0x6CB2, 0x7383, 0x7A4C, 0x7BB2, 0x7C80, 0x957A, 0x99A8, 0x9E7A, 0xA340, 0xAA73, 0xADD9, 0xB5A8, 0xB609, 0xB970
		, 0x0000, 0x6C62, 0x72D0, 0x733A, 0x74FC, 0x7912, 0x7A08, 0x9492, 0x98D8, 0x9E52, 0xA2C8, 0xAB2B, 0xACF0, 0xAD82, 0xADB8, 0xADEA, 0xAE1C, 0xAEB1, 0xB8A0
		, 0x0000, 0x6602, 0x6630, 0x6662, 0x7190, 0x746A, 0x7A80, 0x7C92, 0x7CC0, 0x7CF2, 0x8120, 0x8E0A, 0x9810, 0x9E22, 0xA220, 0xAB9C, 0xAC2B, 0xAC94, 0xACC2, 0xAD20, 0xAF03, 0xAFCC, 0xAFFB, 0xB029, 0xB758
		, 0x0000, 0x6482, 0x7020, 0x75DA, 0x8350, 0x8DA2, 0x9708, 0x9DE2, 0xA160, 0xACA4, 0xAD2A, 0xAD58, 0xAF63, 0xB28C, 0xB2BB, 0xB2E1, 0xB6C0
		, 0x0000, 0x647A, 0x6D80, 0x776A, 0x8328, 0x8E52, 0x9478, 0x9DAA, 0xA0E8, 0xAE42, 0xAF5B, 0xB29A, 0xB608
		, 0x0000, 0x64AA, 0x6888, 0x7A1A, 0x7DC8, 0x9D6A, 0xA148, 0xAED2, 0xAFB4, 0xB22A, 0xB580
		, 0x0000, 0x6502, 0x6848, 0x9DE2, 0xA1F8, 0xB26A, 0xB4F8
		, 0x0000, 0x657A, 0x6828, 0x9E5A, 0xA208
		, 0x0000, 0x65CA, 0x6840, 0x9EEA, 0xA1B0
	}; // 676 bytes

	const uint16_t row_ends[] PROGMEM {		
		0x0000, 0x0001, 0x0002, 0x0005, 0x0008, 0x000D, 0x0012, 0x0017, 
		0x001C, 0x0021, 0x0026, 0x002C, 0x0032, 0x003B, 0x0043, 0x004B, 
		0x0053, 0x005B, 0x0066, 0x0070, 0x007A, 0x0085, 0x0090, 0x00A4, 
		0x00BA, 0x00CD, 0x00DC, 0x00EB, 0x00FE, 0x0117, 0x0128, 0x0135, 
		0x0140, 0x0147, 0x014C, 0x0151
	}; // 72 bytes

	const uint32_t colors[] PROGMEM {		
		0x00000000, 0x00FFCC00, 0x00FF5555, 0x00FFFFFF, 0xCCCCCCCC
	}; // 20 bytes
}

class run2 : public Image {
protected:
	inline uint16_t get_arc(uint16_t i) override {
		return pgm_read_word(&run2_data::arcs[i]);
	}

	inline uint16_t get_row_end(uint8_t row_index) override {
		return pgm_read_word(&run2_data::row_ends[row_index]);
	}

protected:
	const uint16_t angle_mask = 0xFFF8;
	const uint16_t color_mask = 0x0007;

	inline uint16_t get_angle(uint16_t arc) override {
		return arc & angle_mask;
	}

	inline uint32_t get_color(uint16_t arc) override {
		return pgm_read_dword(&(run2_data::colors[arc & color_mask]));
	}

public:
    run2() {
        Image::Initialise();
    }
};
