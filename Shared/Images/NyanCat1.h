#pragma once
#include "../Image.h"

namespace NyanCat1Data {
	const uint16_t arcs[] PROGMEM {
		  0x000C, 0x0F32, 0x1CCC, 0x2660, 0x4A6C
		, 0x000C, 0x1232, 0x198C, 0x2300, 0x33C1, 0x3F72, 0x4021, 0x4770, 0x4A6D, 0x503C, 0x705D, 0x8EFC
		, 0x000C, 0x22ED, 0x24D0, 0x2C11, 0x3002, 0x4860, 0x50FC, 0x68AD, 0x6DE0, 0x917D, 0x96BC, 0xBA3D, 0xCA0C
		, 0x000C, 0x2520, 0x28C2, 0x3BFC, 0x4751, 0x49B0, 0x4FBC, 0x638D, 0x67B0, 0x89E1, 0x8CE0, 0x97AD, 0x9BEC, 0xA27D, 0xA44C, 0xACAD, 0xB170, 0xCE3D, 0xD3AC
		, 0x000C, 0x206D, 0x2210, 0x2951, 0x2B02, 0x3C5C, 0x46F2, 0x4D20, 0x519D, 0x546C, 0x602D, 0x6260, 0x8982, 0x8FA1, 0x9410, 0x9D1D, 0xA0F0, 0xA57D, 0xAA70, 0xBCE1, 0xC310, 0xD58D, 0xD85C, 0xEFC2, 0xF82C
		, 0x000C, 0x1E70, 0x2731, 0x2A52, 0x3C6C, 0x4632, 0x4C60, 0x539C, 0x5D6D, 0x5F70, 0x8841, 0x89C2, 0x9630, 0xB10B, 0xB210, 0xB842, 0xC310, 0xC948, 0xCBD7, 0xD000, 0xDA5D, 0xDC6C, 0xF082, 0xF8CC
		, 0x000C, 0x0D62, 0x0FDC, 0x1C40, 0x2371, 0x25D2, 0x3CEC, 0x45F2, 0x4C31, 0x5000, 0x536C, 0x5B1D, 0x5C80, 0x8C71, 0x9142, 0x9590, 0xAAAD, 0xAD8A, 0xB2D0, 0xB892, 0xC310, 0xC8D8, 0xCBB6, 0xD277, 0xD5D0, 0xDD7D, 0xDF6C, 0xF192, 0xF38C
		, 0x000C, 0x0CA2, 0x13EC, 0x1A40, 0x2091, 0x21F2, 0x3821, 0x39F0, 0x3D92, 0x3FEC, 0x4552, 0x5030, 0x55AC, 0x594D, 0x5A90, 0x61D1, 0x6250, 0x9341, 0x93B0, 0xA73D, 0xA88C, 0xADFA, 0xB3E0, 0xB8D2, 0xC2D0, 0xC848, 0xCAF6, 0xD6C7, 0xD970, 0xE04D, 0xE1AC
		, 0x000C, 0x0C42, 0x12AC, 0x1830, 0x1DB1, 0x1F62, 0x335A, 0x38E0, 0x3D82, 0x4F60, 0x540D, 0x555C, 0x577D, 0x58B0, 0x5F11, 0x60C2, 0x6351, 0x6490, 0xA7BD, 0xA8FC, 0xAEEA, 0xB460, 0xB982, 0xBE31, 0xC270, 0xC7F8, 0xCA16, 0xD7A5, 0xDB14, 0xDCC0, 0xE2BD, 0xE3FC
		, 0x000C, 0x1132, 0x119C, 0x193D, 0x1B30, 0x1C61, 0x1D32, 0x346A, 0x360B, 0x38C0, 0x3D92, 0x4131, 0x46C2, 0x4E60, 0x52CD, 0x540C, 0x56C0, 0x5CC1, 0x5E62, 0x6590, 0xA261, 0xA402, 0xA531, 0xA660, 0xAA6C, 0xB06B, 0xB400, 0xB992, 0xBE60, 0xC398, 0xC6C9, 0xC738, 0xC996, 0xD665, 0xDE04, 0xDF30, 0xE4CD, 0xE60C
		, 0x000C, 0x1AA0, 0x1DB1, 0x1ED2, 0x3490, 0x3DB2, 0x4120, 0x4982, 0x4D50, 0x52AC, 0x549D, 0x55B0, 0x5B01, 0x5C92, 0x6301, 0x6490, 0xA001, 0xA182, 0xA6D1, 0xA800, 0xAB6C, 0xB120, 0xB9E2, 0xBE70, 0xC368, 0xC926, 0xD4F5, 0xE004, 0xE120, 0xE73C
		, 0x0000, 0x05CD, 0x0B8C, 0x1941, 0x1AB0, 0x1FC1, 0x20D2, 0x23B1, 0x2582, 0x3570, 0x3A71, 0x3DB2, 0x40F1, 0x4430, 0x48E2, 0x4CE0, 0x519C, 0x536D, 0x5470, 0x5AA1, 0x5C12, 0x6061, 0x6230, 0x9F91, 0xA102, 0xA950, 0xAC9C, 0xB1A0, 0xB421, 0xB822, 0xBEA0, 0xC358, 0xC866, 0xD3F5, 0xE0F4, 0xE2C0, 0xE88C, 0xEB6D, 0xECDC, 0xF41D, 0xF9D0
		, 0x0000, 0x0E0D, 0x10CC, 0x1B61, 0x1D20, 0x2191, 0x2290, 0x2601, 0x2712, 0x2811, 0x2970, 0x2A71, 0x2B22, 0x4480, 0x48A2, 0x4C10, 0x508C, 0x5340, 0x5CD1, 0x5E32, 0x5E91, 0x5FF0, 0xA1C1, 0xA2C2, 0xA731, 0xA940, 0xAD6C, 0xAECD, 0xB020, 0xB442, 0xBBC1, 0xBE80, 0xC2F8, 0xC826, 0xD2C5, 0xDF14, 0xE430, 0xE90D, 0xEA10, 0xEDDC, 0xEEDD, 0xF190
		, 0x0000, 0x126D, 0x150C, 0x1DED, 0x1F80, 0x1FED, 0x213C, 0x22DD, 0x23D0, 0x261D, 0x27C0, 0x2B61, 0x2DA0, 0x3042, 0x4450, 0x4842, 0x4B90, 0x4FDC, 0x517D, 0x5270, 0xA351, 0xA640, 0xAA8D, 0xAC8C, 0xAF70, 0xB4B2, 0xBA50, 0xBF98, 0xC7C6, 0xD1F5, 0xDD24, 0xE5B0, 0xE804, 0xE8F0
		, 0x0000, 0x164D, 0x17DC, 0x246D, 0x250C, 0x27DD, 0x28C0, 0x2A01, 0x2C80, 0x30F2, 0x4410, 0x47D2, 0x4AF0, 0x4F0C, 0x50AD, 0x5190, 0xA96C, 0xB050, 0xB552, 0xBAA0, 0xBFA8, 0xC786, 0xD0F5, 0xDB94, 0xEA50
		, 0x0000, 0x18ED, 0x1A6C, 0x27D2, 0x2D40, 0x31C2, 0x40B1, 0x43B0, 0x4752, 0x4AA0, 0x4E8C, 0x50A0, 0x54D1, 0x5650, 0xA95D, 0xAA4C, 0xB0D0, 0xB551, 0xB5A0, 0xBBFA, 0xBDC8, 0xC706, 0xD055, 0xDA84, 0xE980
		, 0x0000, 0x1B3D, 0x1C5C, 0x28C2, 0x2C8C, 0x2D6D, 0x2E40, 0x3252, 0x4080, 0x4722, 0x4A00, 0x4DCC, 0x4FD0, 0x5472, 0x57A1, 0x58C0, 0xAB3C, 0xB190, 0xB27D, 0xB4CB, 0xB5A0, 0xBC0A, 0xBDC8, 0xC6B6, 0xCFB5, 0xD934, 0xE710
		, 0x0000, 0x1D1D, 0x1DFC, 0x2ED0, 0x32C2, 0x3AC1, 0x3E22, 0x4091, 0x4360, 0x46B2, 0x49C0, 0x4D6C, 0x4F50, 0x53C2, 0x5870, 0xABFC, 0xB5F0, 0xB79B, 0xB9DA, 0xBAAB, 0xBBCA, 0xBDB8, 0xC696, 0xCEE5, 0xD804, 0xE510
		, 0x0000, 0x1EAD, 0x1FBC, 0x2FA0, 0x3362, 0x3AD0, 0x3E52, 0x4360, 0x4692, 0x4940, 0x4CBC, 0x4E90, 0x52D2, 0x56D1, 0x57A0, 0xACEC, 0xB5AA, 0xBDE8, 0xC636, 0xCE75, 0xD6F4, 0xE2F0
		, 0x0000, 0x204D, 0x214C, 0x3040, 0x33D2, 0x3B50, 0x3DA1, 0x3E72, 0x4350, 0x4672, 0x4900, 0x4CED, 0x4DE0, 0x5212, 0x5670, 0xADAC, 0xB5EA, 0xBB58, 0xC396, 0xC467, 0xC5E6, 0xCDE5, 0xD634, 0xE140
		, 0x0000, 0x21CD, 0x228C, 0x30B0, 0x3432, 0x4350, 0x4612, 0x4890, 0x5301, 0x5482, 0x5501, 0x55B0, 0xAE3C, 0xB3F1, 0xB56A, 0xBB68, 0xC356, 0xCAC5, 0xD544, 0xDFF0
		, 0x0000, 0x0F91, 0x0FD0, 0x22FD, 0x23BC, 0x2EBD, 0x2F70, 0x3212, 0x3ABA, 0x3BA0, 0x3E52, 0x4071, 0x4310, 0x45F2, 0x4860, 0xAEBC, 0xB40A, 0xBBA8, 0xC316, 0xCA85, 0xD494, 0xDE70
		, 0x0000, 0x0F52, 0x10C1, 0x1170, 0x241D, 0x24CC, 0x2C4D, 0x2DE0, 0x3212, 0x38DA, 0x3BA0, 0x3E62, 0x4080, 0x45A2, 0x47F0, 0xAD1D, 0xADCC, 0xB48A, 0xBBB8, 0xC2F6, 0xCA35, 0xD124, 0xDD80
		, 0x0000, 0x0B01, 0x0C90, 0x0F11, 0x1110, 0x252D, 0x25DC, 0x260D, 0x26F0, 0x27AD, 0x284C, 0x29ED, 0x2B30, 0x3141, 0x3232, 0x38FA, 0x3BE0, 0x3E52, 0x4090, 0x4592, 0x47D0, 0xAD9C, 0xB4CA, 0xBC08, 0xC2F6, 0xC9B5, 0xD074, 0xDC30, 0xE6C1, 0xE7A0
		, 0x0000, 0x0AE2, 0x0CD0, 0x288D, 0x28F0, 0x30D2, 0x3920, 0x3E92, 0x4780, 0xAE3C, 0xB53A, 0xBBF8, 0xC2F6, 0xC975, 0xD004, 0xDB20, 0xE642, 0xE830
		, 0x0000, 0x0BA1, 0x0C80, 0x1161, 0x12A0, 0x3132, 0x3950, 0x3AC1, 0x3C40, 0x3DC1, 0x3E92, 0x44C1, 0x44F2, 0x4750, 0xAEBC, 0xB57A, 0xBC18, 0xC2D6, 0xC935, 0xCF94, 0xD7A0, 0xD954, 0xDA30, 0xE681, 0xE790
		, 0x0000, 0x1112, 0x12E0, 0x2F81, 0x3092, 0x3ECC, 0x4242, 0x44B0, 0xAF5C, 0xB5EA, 0xBC48, 0xC2A6, 0xC8D5, 0xCF34, 0xD6D0
		, 0x0000, 0x0D32, 0x0DF1, 0x0EC0, 0x11C1, 0x1260, 0x2FF2, 0x3ECC, 0x42B2, 0x4480, 0x6511, 0x65B0, 0xAFAC, 0xB60A, 0xBC78, 0xC2A6, 0xC8A5, 0xCEA4, 0xD630
		, 0x0000, 0x0CD1, 0x0E90, 0x3082, 0x3471, 0x36F0, 0x38E2, 0x3ECC, 0x4240, 0x63A1, 0x64C2, 0x6650, 0xB04C, 0xB67A, 0xBC88, 0xC296, 0xC865, 0xCE44, 0xD570
		, 0x0000, 0x30E2, 0x3171, 0x3300, 0x3912, 0x3A61, 0x3CD2, 0x3D01, 0x3ECD, 0x4220, 0x6351, 0x63E2, 0x6541, 0x6630, 0x90A2, 0x9230, 0xB0BC, 0xB69A, 0xBC78, 0xC286, 0xC835, 0xCDF4, 0xD4F0
		, 0x0000, 0x6421, 0x64B0, 0x9061, 0x91E0, 0xB10C, 0xB6FA, 0xBCA8, 0xC266, 0xC7E5, 0xCD74, 0xD440
		, 0x0000, 0xB18C, 0xB71A, 0xBCB8, 0xC246, 0xC7B5, 0xCD14, 0xD3C0
		, 0x0000, 0xB1CC, 0xB76A, 0xBCE8, 0xC256, 0xC795, 0xCCD4, 0xD350
		, 0x0000, 0xB24C, 0xB79A, 0xBCD8, 0xC226, 0xC775, 0xCC74, 0xD2C0
		, 0x0000, 0xB27C, 0xB7DA, 0xBCE8, 0xC246, 0xC745, 0xCC24, 0xD250
		, 0x0000, 0xB2BC, 0xB7FA, 0xBD08, 0xBD6A, 0xBD88, 0xBE3A, 0xBE58, 0xC247, 0xC366, 0xC735, 0xCBF4, 0xD200
	}; // 1590 bytes

	const uint16_t row_ends[] PROGMEM {		
		0x0004, 0x0010, 0x001D, 0x0030, 0x0049, 0x0061, 0x007E, 0x009D, 
		0x00BD, 0x00E3, 0x0101, 0x012A, 0x0154, 0x0176, 0x018F, 0x01A8, 
		0x01C3, 0x01DD, 0x01F3, 0x020B, 0x021F, 0x0235, 0x024C, 0x026A, 
		0x027C, 0x0295, 0x02A4, 0x02B7, 0x02CA, 0x02E1, 0x02ED, 0x02F5, 
		0x02FD, 0x0305, 0x030D, 0x031A
	}; // 72 bytes

	const uint32_t colors[] PROGMEM {		
		0x00000000, 0x00888888, 0x00FFFFFF, 0x00FF0000, 0x00880000, 0x00FF8800, 
		0x00FFFF00, 0x00888800, 0x0000FF00, 0x00008800, 0x0000FFFF, 0x00008888, 
		0x00FF00FF, 0x00880088
	}; // 56 bytes
}

class NyanCat1 : public Image {
protected:
	inline uint16_t get_arc(uint16_t i) override {
		return pgm_read_word(&NyanCat1Data::arcs[i]);
	}

	inline uint16_t get_row_end(uint8_t row_index) override {
		return pgm_read_word(&NyanCat1Data::row_ends[row_index]);
	}

protected:
	const uint16_t angle_mask = 0xFFF0;
	const uint16_t color_mask = 0x000F;

	inline uint16_t get_angle(uint16_t arc) override {
		return arc & angle_mask;
	}

	inline uint32_t get_color(uint16_t arc) override {
		return pgm_read_dword(&(NyanCat1Data::colors[arc & color_mask]));
	}

public:
    NyanCat1() {
        Image::Initialise();
    }
};
