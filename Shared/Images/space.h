#pragma once
#include "../Image.h"

namespace SpaceData {
	const uint16_t arcs[] PROGMEM {
		  0x0006
		, 0x0006
		, 0x0006
		, 0x0006
		, 0x0006
		, 0x0006
		, 0x0006
		, 0x0006
		, 0x0006
		, 0x0006
		, 0x0006, 0x5D50, 0x6125, 0x679A, 0x68C6
		, 0x0004, 0x05C6, 0x59E8, 0x5F55, 0x651A, 0x6C56, 0xFC64
		, 0x0004, 0x0896, 0x5810, 0x5DE5, 0x630A, 0x6E06, 0xF97C
		, 0x0004, 0x0A2E, 0x56C0, 0x5C05, 0x619A, 0x6F66, 0xB901, 0xB9AE, 0xBBF9, 0xBE9E, 0xF874
		, 0x0003, 0x03C4, 0x0B4E, 0x55F0, 0x59BD, 0x6462, 0x7056, 0xB501, 0xC196, 0xF283
		, 0x0003, 0x0814, 0x0BB6, 0x5525, 0x641A, 0x7106, 0xB341, 0xC326, 0xEEEB
		, 0x0004, 0x032B, 0x0AFC, 0x0BDE, 0x550A, 0x5B1D, 0x625A, 0x711E, 0xB231, 0xC41E, 0xECEB, 0xF38E, 0xF674
		, 0x0004, 0x06EB, 0x0D0E, 0x54DA, 0x5A6D, 0x6112, 0x7176, 0xB181, 0xC4A6, 0xEC93, 0xF106, 0xF64C
		, 0x0004, 0x09DB, 0x0EEE, 0x54FA, 0x5A0D, 0x682A, 0x7136, 0xB121, 0xC526, 0xF6AC
		, 0x0004, 0x0BDB, 0x1086, 0x552A, 0x598D, 0x694E, 0x69CD, 0x6C62, 0x710E, 0xB109, 0xC52E, 0xF6F4
		, 0x0004, 0x0A76, 0x0D2B, 0x11A6, 0x557A, 0x593D, 0x6D1A, 0x70D6, 0xB0F1, 0xC4DE, 0xF7CC
		, 0x0004, 0x0996, 0x0E23, 0x12B6, 0x4BB8, 0x4C3E, 0x55D2, 0x592D, 0x5EAA, 0x5EED, 0x62C2, 0x661D, 0x6DCA, 0x706E, 0xB161, 0xC48E, 0xF894
		, 0x0004, 0x0866, 0x0E33, 0x131E, 0x4960, 0x4BF6, 0x566A, 0x5975, 0x5E52, 0x66F5, 0x6E2A, 0x6F96, 0xB1B9, 0xC426, 0xF9F4
		, 0x0004, 0x064E, 0x1033, 0x12EE, 0x4840, 0x4BA6, 0x575A, 0x5A4D, 0x5E92, 0x663D, 0x6F06, 0xB289, 0xC36E, 0xFBF4
		, 0x0004, 0x022E, 0x4780, 0x4BAE, 0x5852, 0x5B5D, 0x5F12, 0x6415, 0x6DE6, 0xB371, 0xC24E, 0xFF5C
		, 0x0006, 0x4750, 0x4BFE, 0x595A, 0x5C8D, 0x5FF2, 0x627D, 0x69B0, 0x6CAE, 0xB4A1, 0xC0F6
		, 0x0006, 0x4768, 0x4C5E, 0x5AF2, 0x5C9D, 0x60BA, 0x6155, 0x6748, 0x6B6E, 0xB651, 0xBEC6
		, 0x0006, 0x4788, 0x4CF6, 0x5CBD, 0x62B8, 0x6986, 0xB9D9, 0xBA0E, 0xBBA1, 0xBC46, 0xBC71, 0xBCDE
		, 0x0006, 0x47F0, 0x4E2E, 0x6018, 0x668E
		, 0x0006, 0x48D0, 0x5036
		, 0x0006, 0x49F0, 0x5126
		, 0x0006, 0x4C20, 0x4ED6
		, 0x0006
		, 0x0006
		, 0x0006
		, 0x0006
	}; // 454 bytes

	const uint16_t row_ends[] PROGMEM {		
		0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 
		0x0008, 0x0009, 0x000E, 0x0015, 0x001C, 0x0027, 0x0031, 0x003A, 
		0x0047, 0x0053, 0x005D, 0x0069, 0x0074, 0x0085, 0x0094, 0x00A2, 
		0x00AE, 0x00B9, 0x00C4, 0x00D0, 0x00D5, 0x00D8, 0x00DB, 0x00DE, 
		0x00DF, 0x00E0, 0x00E1, 0x00E2
	}; // 72 bytes

	const uint32_t colors[] PROGMEM {		
		0x00FFFFFF, 0x00FFFF00, 0x0000FF00, 0x0000FFFF, 0x00FF00FF, 0x000000FF, 
		0x00000000
	}; // 28 bytes
}

class Space : public Image {
public:
	Space() {
		Image::Initialise();
	}
protected:
	inline uint16_t get_arc(uint16_t i) override {
		return pgm_read_word(&SpaceData::arcs[i]);
	}

	inline uint16_t get_row_end(uint8_t row_index) override {
		return pgm_read_word(&SpaceData::row_ends[row_index]);
	}

protected:
	const uint16_t angle_mask = 0xFFF8;
	const uint16_t color_mask = 0x0007;

	inline uint16_t get_angle(uint16_t arc) override {
		return arc & angle_mask;
	}

	inline uint32_t get_color(uint16_t arc) override {
		return pgm_read_dword(&(SpaceData::colors[arc & color_mask]));
	}
};
