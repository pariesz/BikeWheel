#pragma once
#ifdef SIMULATION
#include "Arduino_Mock.h"
#else
#include <avr/pgmspace.h>
#endif

#include "../Image.h"

namespace HamsterGore1Data {
	const uint16_t arcs[] PROGMEM {
		  0x0000
		, 0x0000
		, 0x0000
		, 0x0000, 0x578B, 0x5FE9, 0x6084, 0x6851, 0x68EB, 0x6AB0, 0xAB73, 0xB470, 0xD3A3, 0xD568
		, 0x0000, 0x4D23, 0x5464, 0x67F3, 0x6910, 0xAD43, 0xBF28, 0xD22B, 0xD580
		, 0x0000, 0x4633, 0x49C9, 0x4A54, 0x67BB, 0x69C8, 0x7293, 0x731C, 0x74A3, 0x7528, 0xAEF3, 0xC4A0, 0xD18B, 0xD5A8
		, 0x0000, 0x306B, 0x4679, 0x46F4, 0x5F61, 0x678C, 0x6BDB, 0x730C, 0x7573, 0x7668, 0xAFF3, 0xC958, 0xD08B, 0xD550
		, 0x0000, 0x2A93, 0x463C, 0x5C69, 0x6CBC, 0x76B3, 0x7728, 0xB12B, 0xCD40, 0xCF83, 0xD568
		, 0x0000, 0x2633, 0x4609, 0x467C, 0x5849, 0x6F3C, 0x7451, 0x76DB, 0x7748, 0xB24B, 0xD4B0, 0xEB33, 0xF120
		, 0x0000, 0x2203, 0x4664, 0x4EC9, 0x70CC, 0x7201, 0x7332, 0x7803, 0x7930, 0xB39B, 0xD460, 0xE733, 0xEA01, 0xEACC, 0xF199, 0xF203, 0xF330
		, 0x0000, 0x1EDB, 0x461A, 0x467C, 0x4CF1, 0x71E2, 0x7923, 0x7980, 0xA2AB, 0xAB68, 0xB493, 0xD430, 0xE433, 0xE619, 0xE67C, 0xF30B, 0xF3C8
		, 0x0000, 0x1C2B, 0x26A0, 0x2B53, 0x45A9, 0x460C, 0x4B19, 0x6573, 0x66E0, 0x68B3, 0x6A21, 0x71BA, 0x7723, 0x78F0, 0xA55B, 0xB1A0, 0xB59B, 0xD390, 0xE14B, 0xE2C1, 0xE37C, 0xF413, 0xF470
		, 0x0000, 0x19B3, 0x1E28, 0x1E83, 0x1ED0, 0x28CB, 0x44E2, 0x453C, 0x49A9, 0x64C0, 0x6A3B, 0x6A91, 0x7273, 0x75E0, 0xA793, 0xB548, 0xB6AB, 0xD318, 0xDEC3, 0xE079, 0xE0D4, 0xF4B3, 0xF508
		, 0x0000, 0x1753, 0x18F8, 0x2573, 0x4402, 0x445C, 0x4849, 0x64E3, 0x65D8, 0x697B, 0x6A79, 0x6F63, 0x7160, 0xA993, 0xD2A0, 0xDC2B, 0xDE21, 0xDE7C, 0xE561, 0xED44, 0xF4D1, 0xF520
		, 0x0000, 0x22D3, 0x2550, 0x30A3, 0x4371, 0x43C4, 0x4691, 0x6DCB, 0x6EB8, 0xAB4B, 0xD230, 0xD9BB, 0xDB49, 0xDBEC, 0xE2D1, 0xEE6C, 0xF501, 0xF550
		, 0x0000, 0x312B, 0x43B9, 0x44A2, 0x44F3, 0x453A, 0x4589, 0x6B9B, 0x6D18, 0x94AB, 0xA228, 0xACF3, 0xCA0A, 0xCED3, 0xD188, 0xD78B, 0xD901, 0xD954, 0xE081, 0xEFD4, 0xF533, 0xF580
		, 0x0000, 0x3003, 0x4569, 0x6903, 0x6B00, 0x9823, 0xA9C8, 0xAE23, 0xC5DA, 0xC6B9, 0xCDF4, 0xD041, 0xD123, 0xD1B0, 0xD533, 0xD6E9, 0xD734, 0xDF99, 0xF13C, 0xF501, 0xF548
		, 0x0000, 0x2E9B, 0x4551, 0x6423, 0x6728, 0x9C6B, 0xC38A, 0xC411, 0xCB94, 0xD239, 0xD2CB, 0xD429, 0xD4BC, 0xDF41, 0xF33C, 0xF411, 0xF45B, 0xF4E0
		, 0x0000, 0x2D03, 0x4541, 0x5692, 0x5A49, 0x61C3, 0x6318, 0xA05B, 0xC1AA, 0xC231, 0xCA74, 0xD1A1, 0xD73C, 0xDEF1, 0xF3BB, 0xF440
		, 0x0000, 0x2B9B, 0x3738, 0x377B, 0x4569, 0x55AA, 0x5C61, 0x5FBA, 0x610B, 0x6188, 0xA423, 0xC042, 0xC081, 0xC98C, 0xCF39, 0xD8C4, 0xDEF1, 0xF293, 0xF358
		, 0x0000, 0x2A43, 0x3270, 0x36EB, 0x45D2, 0x4611, 0x5502, 0x606B, 0x60E8, 0xA783, 0xBF22, 0xBF61, 0xC894, 0xCE09, 0xD8BC, 0xDF31, 0xF193, 0xF250
		, 0x0000, 0x28FB, 0x2E00, 0x362B, 0x46F2, 0x4769, 0x54DA, 0x5F63, 0x6018, 0x9E73, 0x9FA2, 0xA09B, 0xA280, 0xAC93, 0xBE52, 0xBE89, 0xC7EC, 0xCD69, 0xD7FC, 0xDF29, 0xF06B, 0xF120
		, 0x0000, 0x27D3, 0x2A60, 0x3593, 0x499A, 0x4B01, 0x5022, 0x514B, 0x5410, 0x5503, 0x5542, 0x5B13, 0x5B4A, 0x5E1B, 0x5F40, 0x9D3B, 0x9DB2, 0xA30B, 0xA380, 0xB143, 0xBD62, 0xBD99, 0xC764, 0xCC81, 0xD73C, 0xDF21, 0xEF3B, 0xEFE8
		, 0x0000, 0x34AB, 0x4FE8, 0x5553, 0x5602, 0x5A4B, 0x5AF0, 0x5BDB, 0x5D70, 0x9C0B, 0x9CB2, 0xA3AB, 0xA3E8, 0xB57B, 0xBCE2, 0xBD21, 0xC70C, 0xCAA1, 0xD61C, 0xDF21, 0xEDFB, 0xEEE0
		, 0x0000, 0x33E3, 0x4DA0, 0x5693, 0x57AA, 0x592B, 0x5A08, 0x9B0B, 0x9B7A, 0xA3F8, 0xB8EB, 0xBC62, 0xBC99, 0xD50C, 0xDEA1, 0xED03, 0xEDA8
		, 0x0000, 0x1C3B, 0x2260, 0x332B, 0x3AC8, 0x3F7B, 0x4B90, 0x99E3, 0x9A8A, 0xA3AB, 0xA3D8, 0xBC4B, 0xBC79, 0xD3DC, 0xDD61, 0xEBD3, 0xEC78
		, 0x0003, 0x0068, 0x194B, 0x1AF2, 0x22FB, 0x23C8, 0x326B, 0x38C8, 0x3EC3, 0x4558, 0x476B, 0x49E0, 0x775B, 0x77C2, 0x799B, 0x7A08, 0x991B, 0x9982, 0xA25B, 0xA360, 0xBD53, 0xBDB9, 0xD254, 0xDC31, 0xEA9B, 0xEB68, 0xFE23
		, 0x0002, 0x00CB, 0x0130, 0x18C2, 0x242B, 0x24C0, 0x318B, 0x3688, 0x3E23, 0x4320, 0x46F3, 0x4850, 0x76B3, 0x771A, 0x79E3, 0x7A18, 0x9843, 0x98AA, 0xA013, 0xA178, 0xBEA3, 0xBF71, 0xD00C, 0xDB01, 0xE933, 0xEA00, 0xFD9B, 0xFDCA
		, 0x0002, 0x015B, 0x01C0, 0x0893, 0x0928, 0x18C3, 0x1922, 0x1E6B, 0x218A, 0x24DB, 0x2568, 0x30F3, 0x3470, 0x3DCB, 0x4118, 0x46C3, 0x46F8, 0x6D2B, 0x6F52, 0x717B, 0x74C8, 0x74FB, 0x768A, 0x79DB, 0x7A08, 0x977B, 0x97E2, 0x9DEB, 0x9F48, 0xC03B, 0xC101, 0xD09C, 0xD991, 0xE70B, 0xE868, 0xFDAB, 0xFE0A
		, 0x0002, 0x01E3, 0x0270, 0x07F3, 0x0852, 0x094B, 0x09A8, 0x193B, 0x199A, 0x1D03, 0x1DC0, 0x21F3, 0x22B2, 0x258B, 0x25B8, 0x305B, 0x3300, 0x3D43, 0x3F50, 0x6B83, 0x6C72, 0x798B, 0x79B8, 0x96C3, 0x9722, 0x9C13, 0x9D30, 0xC19B, 0xC259, 0xD1BC, 0xD829, 0xE453, 0xE630, 0xFE4B, 0xFEAA
		, 0x0002, 0x0293, 0x0350, 0x0703, 0x07BA, 0x09C3, 0x0A20, 0x19D3, 0x1A32, 0x1C63, 0x1CC0, 0x22AB, 0x230A, 0x25FB, 0x2628, 0x2FF3, 0x3168, 0x3D0B, 0x3D98, 0x6A9B, 0x6B52, 0x792B, 0x7958, 0x9653, 0x96AA, 0x9A03, 0x9B18, 0xC2F3, 0xC3D9, 0xD504, 0xD6A9, 0xE103, 0xE368, 0xFEE3, 0xFF42
		, 0x0003, 0x005A, 0x03CB, 0x0652, 0x0A4B, 0x0AA0, 0x1A83, 0x1AE2, 0x1B9B, 0x1BF0, 0x232B, 0x235A, 0x263B, 0x2668, 0x6A42, 0x7033, 0x7148, 0x717B, 0x71D0, 0x7203, 0x74BA, 0x78B3, 0x7908, 0x961B, 0x9642, 0x99E0, 0xC4A3, 0xC589, 0xDD03, 0xDFB0, 0xFF73
		, 0x0000, 0x0083, 0x013A, 0x0AB3, 0x0AE0, 0x1B3B, 0x1B68, 0x237B, 0x23D2, 0x2678, 0x6A4B, 0x6B02, 0x701B, 0x7040, 0x758B, 0x774A, 0x7803, 0x7888, 0x960B, 0x963A, 0x99BB, 0x99E8, 0xC65B, 0xC769, 0xD7F3, 0xDB18
		, 0x0000, 0x018B, 0x0292, 0x0AF0, 0x23F3, 0x2658, 0x6B8B, 0x6C92, 0x7028, 0x962B, 0x965A, 0x999B, 0x99C0, 0xC85B, 0xCA61, 0xD29B, 0xD608
		, 0x0000, 0x035B, 0x0A60, 0x6D0B, 0x6E8A, 0x6FE3, 0x7010, 0x964B, 0x96FA, 0x982B, 0x9950, 0xCBFB, 0xCC28, 0xCC53, 0xD0B0
		, 0x0000
	}; // 1334 bytes

	const uint16_t row_ends[] PROGMEM {		
		0x0000, 0x0001, 0x0002, 0x000D, 0x0016, 0x0024, 0x0032, 0x003D, 
		0x004A, 0x005B, 0x006C, 0x0083, 0x009A, 0x00B0, 0x00C2, 0x00D8, 
		0x00ED, 0x00FF, 0x010F, 0x0122, 0x0134, 0x014A, 0x0166, 0x017C, 
		0x018D, 0x019E, 0x01B9, 0x01D5, 0x01FA, 0x021D, 0x0240, 0x025F, 
		0x0279, 0x028A, 0x0299, 0x029A
	}; // 72 bytes

	const uint32_t colors[] PROGMEM {		
		0x00000000, 0x00FFCC00, 0x00FF5555, 0x00800000, 0x00FFFFFF
	}; // 20 bytes
}

class HamsterGore1 : public Image {
protected:
	inline uint16_t get_arc(uint16_t i) override {
		return pgm_read_word(&HamsterGore1Data::arcs[i]);
	}

	inline uint16_t get_row_end(uint8_t row_index) override {
		return pgm_read_word(&HamsterGore1Data::row_ends[row_index]);
	}

protected:
	const uint16_t angle_mask = 0xFFF8;
	const uint16_t color_mask = 0x0007;

	inline uint16_t get_angle(uint16_t arc) override {
		return arc & angle_mask;
	}

	inline uint32_t get_color(uint16_t arc) override {
		return pgm_read_dword(&(HamsterGore1Data::colors[arc & color_mask]));
	}

public:
    HamsterGore1() {
        Image::Initialise();
    }
};
