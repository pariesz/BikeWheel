#pragma once
#ifdef SIMULATION
#include "Arduino_Mock.h"
#else
#include <avr/pgmspace.h>
#endif

#include "../Image.h"

namespace gore2_data {
	const uint16_t arcs[] PROGMEM {
		  0x0000, 0xAC03, 0xACC9, 0xE733, 0xE800
		, 0x0000, 0xAB61, 0xE8AB, 0xE960
		, 0x0000, 0x2B6B, 0x33F8, 0x4DA3, 0x4E50, 0x4EFB, 0x5048, 0x50F3, 0x5438, 0x558B, 0x5630, 0xAA71, 0xE99B, 0xEA48
		, 0x0000, 0x2A92, 0x368B, 0x3858, 0x3B5B, 0x3F89, 0x4023, 0x6380, 0xA9AB, 0xAA41, 0xEB03, 0xEB98
		, 0x0000, 0x2A7B, 0x2B0A, 0x3991, 0x4ECA, 0x4F5B, 0x5F90, 0xA9E9, 0xEBE0
		, 0x0000, 0x2A53, 0x2B5A, 0x39C9, 0x5212, 0x5293, 0x6080, 0xA9C9, 0xB634, 0xBCE1, 0xBD6C, 0xBE71, 0xEBDB, 0xEC60
		, 0x0000, 0x274B, 0x2842, 0x3981, 0x545B, 0x6430, 0xA9B1, 0xB444, 0xBE51, 0xD08C, 0xD6C1, 0xEC58
		, 0x0000, 0x26F3, 0x276A, 0x38A1, 0x552B, 0x66D8, 0xA973, 0xA9E9, 0xB12C, 0xBCF1, 0xCD44, 0xD5D9, 0xEC80
		, 0x0000, 0x277B, 0x27EA, 0x2C91, 0x2D6A, 0x3799, 0x5553, 0x68D8, 0xA9D1, 0xAF54, 0xBCE9, 0xCBC4, 0xD4B1, 0xEC7B, 0xECE0
		, 0x0000, 0x2803, 0x28CA, 0x2C01, 0x5462, 0x54CB, 0x6B30, 0xAA01, 0xAF34, 0xBCC9, 0xCB9C, 0xD401, 0xE932, 0xEA03, 0xED30
		, 0x0000, 0x28C3, 0x2982, 0x2B69, 0x52AA, 0x530B, 0x6C90, 0xA9E3, 0xAA49, 0xB004, 0xBCF1, 0xCB6C, 0xD2A9, 0xE492, 0xE5B3, 0xEDB0
		, 0x0000, 0x29E3, 0x2A9A, 0x2B51, 0x5082, 0x50E3, 0x62E8, 0x67A3, 0x6E20, 0xAA13, 0xAA69, 0xB0EC, 0xBD91, 0xCAEC, 0xD1C9, 0xDFDA, 0xE0F3, 0xEDF0
		, 0x0000, 0x2AD3, 0x2B29, 0x4E7A, 0x4F2B, 0x63B8, 0x6DAB, 0x6F08, 0xAAA9, 0xB1DC, 0xBE31, 0xC9DC, 0xD109, 0xDBAA, 0xDC5B, 0xEE80
		, 0x0000, 0x2ABB, 0x2B09, 0x4D3C, 0x4DE1, 0x4E34, 0x4ED9, 0x4F34, 0x4F81, 0x4FDB, 0x64E0, 0xAAE3, 0xAB31, 0xB2C4, 0xBEE9, 0xC874, 0xCFB1, 0xD742, 0xD7EB, 0xEEE8
		, 0x0000, 0x2A5B, 0x2AA9, 0x482C, 0x4D29, 0x4E6B, 0x65F0, 0xAAFB, 0xAB49, 0xB3C4, 0xBFA9, 0xC644, 0xCDC9, 0xD282, 0xD373, 0xEF58
		, 0x0000, 0x29F3, 0x2A41, 0x458C, 0x4AA1, 0x4BD3, 0x6718, 0xAB73, 0xABC1, 0xB4C4, 0xC071, 0xC40C, 0xC7A3, 0xC888, 0xCB3B, 0xEF80
		, 0x0000, 0x29A1, 0x2F73, 0x3001, 0x4364, 0x48E1, 0x497B, 0x67D8, 0xABD3, 0xAC19, 0xB5AC, 0xC703, 0xC748, 0xCBA3, 0xEFC8
		, 0x0000, 0x299B, 0x29E1, 0x2DC3, 0x2E50, 0x315B, 0x31E9, 0x3F84, 0x4819, 0x48AB, 0x6890, 0xAC3B, 0xAC81, 0xB6C4, 0xC693, 0xC6D8, 0xCC23, 0xEFE8
		, 0x0000, 0x29D3, 0x2A11, 0x2D8B, 0x2DD0, 0x3211, 0x3B24, 0x4761, 0x47AA, 0x47EB, 0x5CF8, 0x5FA3, 0x6978, 0xAC9B, 0xACE1, 0xB8DC, 0xC673, 0xC6B8, 0xCC53, 0xF000
		, 0x0000, 0x2A53, 0x2A91, 0x2DEB, 0x2EF0, 0x2F7B, 0x3000, 0x3043, 0x3080, 0x310B, 0x31C9, 0x3A94, 0x46B1, 0x46F3, 0x5E30, 0x62D3, 0x6A10, 0xAD2B, 0xAD69, 0xBD6C, 0xBDA9, 0xBEB4, 0xC633, 0xC670, 0xCCE3, 0xF000
		, 0x0000, 0x2ABB, 0x2B39, 0x39AC, 0x45D1, 0x4613, 0x5EB0, 0x64EB, 0x6AA0, 0xAD7B, 0xADF9, 0xC0DC, 0xC613, 0xC650, 0xCD4B, 0xF010
		, 0x0000, 0x2B63, 0x2BD9, 0x3894, 0x3F81, 0x403B, 0x45C0, 0x45FB, 0x5F28, 0x66D3, 0x6B60, 0xAE03, 0xAE81, 0xC1EC, 0xC5FB, 0xC638, 0xCDAB, 0xE0D0, 0xE18B, 0xE970, 0xE9B3, 0xF028
		, 0x0000, 0x2C03, 0x2C41, 0x3644, 0x3D01, 0x3D7B, 0x3F20, 0x4873, 0x5FB8, 0x685B, 0x6B98, 0xAEB3, 0xAF29, 0xC244, 0xC5FB, 0xC638, 0xCE23, 0xE088, 0xE1F3, 0xE8F0, 0xEA1B, 0xF028
		, 0x0000, 0x2C5B, 0x2C91, 0x2D02, 0x2F49, 0x32E4, 0x3559, 0x3593, 0x3814, 0x3B71, 0x3BE3, 0x3D00, 0x4A83, 0x5758, 0x5A0B, 0x6020, 0x699B, 0x6C10, 0xAF2B, 0xAFD9, 0xC28C, 0xC620, 0xCEB3, 0xD160, 0xD48B, 0xE000, 0xE283, 0xE858, 0xEA2B, 0xF000
		, 0x0000, 0x1833, 0x18DA, 0x1A2B, 0x1B40, 0x2C7B, 0x2CB2, 0x3031, 0x30A4, 0x3453, 0x3488, 0x380B, 0x3844, 0x39C9, 0x3A03, 0x3AA8, 0x4C1B, 0x5738, 0x5BCB, 0x6060, 0x6B13, 0x6C58, 0xAFFB, 0xB0A1, 0xC2BC, 0xC633, 0xC668, 0xCF23, 0xD150, 0xD65B, 0xDFB8, 0xE2C3, 0xE7C8, 0xEA6B, 0xEFD8
		, 0x0000, 0x17FB, 0x1832, 0x1B63, 0x1B98, 0x2CCB, 0x2D02, 0x3099, 0x30D4, 0x3400, 0x380B, 0x38A8, 0x4D7B, 0x5738, 0x5CFB, 0x6090, 0x71C3, 0x72D2, 0x741B, 0x74B8, 0x964B, 0x96B0, 0xB0D3, 0xB171, 0xC2DC, 0xC641, 0xC678, 0xCF9B, 0xD148, 0xD7E3, 0xDF48, 0xE323, 0xE760, 0xEA8B, 0xEFA0
		, 0x0000, 0x1813, 0x184A, 0x1B90, 0x2D13, 0x2DAA, 0x3023, 0x319C, 0x31CB, 0x326C, 0x3299, 0x32D4, 0x3339, 0x33A3, 0x34A9, 0x34E3, 0x3510, 0x4E9B, 0x5428, 0x5493, 0x5740, 0x5E0B, 0x60E8, 0x705B, 0x712A, 0x74E3, 0x7548, 0x945B, 0x9532, 0x97DB, 0x9980, 0xB19B, 0xB269, 0xC2E4, 0xC661, 0xC690, 0xD00B, 0xD148, 0xD91B, 0xDED8, 0xE39B, 0xE6E0, 0xEA9B, 0xEF50
		, 0x0003, 0x0060, 0x1863, 0x1892, 0x1B93, 0x1BC0, 0x4F8B, 0x5450, 0x5553, 0x5788, 0x5EEB, 0x6118, 0x6F53, 0x6FEA, 0x7583, 0x7618, 0x93AB, 0x9412, 0x9A7B, 0x9BA8, 0xB2AB, 0xB371, 0xC30C, 0xC6A0, 0xD0A3, 0xD168, 0xDA03, 0xDE68, 0xE3D3, 0xE668, 0xEA6B, 0xEF00, 0xFD33
		, 0x0002, 0x015B, 0x02B8, 0x1893, 0x18C2, 0x1BAB, 0x1BE0, 0x5083, 0x5468, 0x55FB, 0x57B8, 0x5FEB, 0x6148, 0x6EBB, 0x6F22, 0x7623, 0x76B8, 0x9362, 0x9C5B, 0x9D88, 0xB3F3, 0xB521, 0xC2C4, 0xC6AB, 0xC6D8, 0xDAF3, 0xDDE0, 0xE41B, 0xE5D8, 0xEA5B, 0xEEA0, 0xFAEB, 0xFC4A
		, 0x0002, 0x02DB, 0x03C8, 0x18D3, 0x193A, 0x1C13, 0x1CA0, 0x2343, 0x23D0, 0x515B, 0x54C0, 0x56AB, 0x57C8, 0x60B3, 0x6178, 0x6E8A, 0x71C3, 0x737A, 0x76E3, 0x7770, 0x7B13, 0x7CC0, 0x9353, 0x938A, 0x9DF3, 0x9EE8, 0xB5AB, 0xB699, 0xC19C, 0xC6B9, 0xC6E8, 0xDB93, 0xDD78, 0xE453, 0xE570, 0xEA63, 0xEE28, 0xF95B, 0xFA4A
		, 0x0003, 0x005A, 0x040B, 0x0498, 0x1943, 0x19A2, 0x1CF3, 0x1E68, 0x2013, 0x2040, 0x2073, 0x227A, 0x23C0, 0x5213, 0x54D0, 0x573B, 0x5828, 0x6163, 0x61C0, 0x6E7B, 0x6F62, 0x7023, 0x7138, 0x7403, 0x7492, 0x77B3, 0x7870, 0x798B, 0x7A4A, 0x7CAB, 0x7D08, 0x938B, 0x93EA, 0x9F2B, 0xA192, 0xA33B, 0xA3C0, 0xB783, 0xB811, 0xC004, 0xC6D1, 0xC700, 0xDC0B, 0xDCF0, 0xE4B3, 0xE4E0, 0xEA6B, 0xEDB8, 0xF813, 0xF8CA, 0xFE23
		, 0x0000, 0x00E3, 0x01CA, 0x04DB, 0x0538, 0x19CB, 0x1A2A, 0x23B8, 0x52A3, 0x54F8, 0x57DB, 0x5838, 0x74E3, 0x7542, 0x7D00, 0x944B, 0x972A, 0xA3FB, 0xA488, 0xB8BB, 0xB971, 0xBE84, 0xC6A3, 0xC6F8, 0xEA5B, 0xED68, 0xF7B3, 0xF7E2, 0xFCC3, 0xFD78
		, 0x0000, 0x01EB, 0x0272, 0x0573, 0x05C8, 0x1A83, 0x1B3A, 0x237B, 0x23A8, 0x534B, 0x5530, 0x755B, 0x75E2, 0x7D18, 0x990B, 0x9930, 0x9963, 0x9C62, 0xA470, 0xB9E3, 0xBA38, 0xBA9B, 0xBAF1, 0xBD94, 0xC553, 0xC658, 0xEA63, 0xECD8, 0xF7EB, 0xF89A, 0xFC4B, 0xFCA8
		, 0x0000, 0x02BB, 0x0342, 0x057B, 0x05A0, 0x1BEB, 0x1D4A, 0x2343, 0x2370, 0x53BB, 0x5540, 0x7623, 0x76D2, 0x7D03, 0x7D28, 0x9DB3, 0xA01A, 0xA1D3, 0xA1FA, 0xA253, 0xA408, 0xBC03, 0xBCD9, 0xBD0B, 0xBDE1, 0xBE14, 0xC0F9, 0xC123, 0xC438, 0xEA43, 0xEC48, 0xF8FB, 0xFA2A, 0xFC38
		, 0x0000, 0x03DB, 0x04D8, 0x1E5B, 0x1E88, 0x1EB3, 0x20B2, 0x22E3, 0x2308, 0x5433, 0x5560, 0x7743, 0x784A, 0x7CD3, 0x7CF8, 0xEA33, 0xEBD8, 0xFACB, 0xFBFA, 0xFC23, 0xFC48
		, 0x0000, 0x218B, 0x2258, 0x5473, 0x5570, 0x78CB, 0x79C2, 0x7CB8, 0xEA3B, 0xEB88, 0xFC13, 0xFC38
	}; // 1566 bytes

	const uint16_t row_ends[] PROGMEM {		
		0x0004, 0x0008, 0x0016, 0x0022, 0x002B, 0x0039, 0x0045, 0x0052, 
		0x0061, 0x0070, 0x0080, 0x0092, 0x00A2, 0x00B6, 0x00C6, 0x00D6, 
		0x00E5, 0x00F7, 0x010B, 0x0125, 0x0135, 0x014B, 0x0161, 0x017F, 
		0x01A2, 0x01C5, 0x01F1, 0x0212, 0x0233, 0x025A, 0x028D, 0x02AB, 
		0x02CB, 0x02ED, 0x0302, 0x030E
	}; // 72 bytes

	const uint32_t colors[] PROGMEM {		
		0x00000000, 0x00FFCC00, 0x00FF5555, 0x00800000, 0x00FFFFFF
	}; // 20 bytes
}

class gore2 : public Image {
protected:
	inline uint16_t get_arc(uint16_t i) override {
		return pgm_read_word(&gore2_data::arcs[i]);
	}

	inline uint16_t get_row_end(uint8_t row_index) override {
		return pgm_read_word(&gore2_data::row_ends[row_index]);
	}

protected:
	const uint16_t angle_mask = 0xFFF8;
	const uint16_t color_mask = 0x0007;

	inline uint16_t get_angle(uint16_t arc) override {
		return arc & angle_mask;
	}

	inline uint32_t get_color(uint16_t arc) override {
		return pgm_read_dword(&(gore2_data::colors[arc & color_mask]));
	}
};
