#pragma once
#ifdef SIMULATION
#include "Arduino_Mock.h"
#else
#include <avr/pgmspace.h>
#endif

#include "../Image.h"

namespace NyanCat1_data {
	const uint16_t arcs[] PROGMEM {
		  0x0033, 0x0F3F, 0x1DB3, 0x2640, 0x4A73
		, 0x0033, 0x0EB7, 0x123B, 0x147F, 0x1AF3, 0x2300, 0x33D5, 0x4000, 0x4495, 0x4540, 0x4B22, 0x5033, 0x7062, 0x7491, 0x8AA2, 0x8EF3
		, 0x0033, 0x1677, 0x1873, 0x24C0, 0x2C15, 0x2F6A, 0x4780, 0x50F3, 0x68A2, 0x6B51, 0x6DC0, 0x9151, 0x9422, 0x96B3, 0xBAD1, 0xC6A2, 0xCA33
		, 0x0033, 0x2500, 0x28EA, 0x3CB3, 0x4037, 0x47C0, 0x4FB3, 0x63A2, 0x6551, 0x6780, 0x89D5, 0x8B00, 0x9791, 0x9A22, 0x9BF3, 0xA262, 0xA473, 0xACA2, 0xB140, 0xCD91, 0xD1E2, 0xD3B3, 0xF237, 0xF7B3
		, 0x0033, 0x2051, 0x2200, 0x2B2A, 0x3C73, 0x46EA, 0x4D00, 0x5191, 0x5473, 0x6240, 0x88EA, 0x8F95, 0x9380, 0x9E22, 0xA0C0, 0xA722, 0xAA40, 0xBCD5, 0xC300, 0xD591, 0xD722, 0xD873, 0xEFFF, 0xF833
		, 0x0033, 0x1D51, 0x1EC0, 0x2795, 0x2A6A, 0x3CF3, 0x462A, 0x4C40, 0x53B3, 0x5DD1, 0x5F40, 0x88EA, 0x9600, 0xB085, 0xB200, 0xB87F, 0xC300, 0xC94C, 0xCAC8, 0xCBE8, 0xCC64, 0xCE54, 0xCFD0, 0xD080, 0xDC73, 0xF13F, 0xF8F3
		, 0x0033, 0x0D7B, 0x0FF7, 0x11B3, 0x1C40, 0x2355, 0x256A, 0x3CF3, 0x45EA, 0x4C15, 0x4F80, 0x5373, 0x5C80, 0x8CD5, 0x916A, 0x9580, 0xAA91, 0xAD8F, 0xB340, 0xB8BF, 0xC300, 0xC8CC, 0xCBBC, 0xD178, 0xD454, 0xD5C0, 0xDD51, 0xDF73, 0xF1BB, 0xF3B7, 0xF7F3
		, 0x0033, 0x0D3F, 0x13F3, 0x1A40, 0x2095, 0x21EA, 0x367F, 0x39C0, 0x3DAA, 0x3FF7, 0x45EA, 0x5000, 0x55B3, 0x5A80, 0x9355, 0x9380, 0xA711, 0xA8B3, 0xADCF, 0xB3C0, 0xB97F, 0xC2C0, 0xC84C, 0xCAFC, 0xD940, 0xE1B3
		, 0x0033, 0x0CBF, 0x1333, 0x1800, 0x1D95, 0x1F6A, 0x337F, 0x38C0, 0x3DAA, 0x4EC0, 0x5573, 0x5880, 0x5F95, 0x60EA, 0x6400, 0xA8F3, 0xAF4F, 0xB4C0, 0xB9BF, 0xBE15, 0xC240, 0xC78C, 0xCA3C, 0xD7B8, 0xD8F4, 0xDCC0, 0xE3F3
		, 0x0033, 0x0EF7, 0x113B, 0x11B7, 0x11F3, 0x1922, 0x1B00, 0x1CEA, 0x33FF, 0x36D5, 0x38C0, 0x3DAA, 0x4115, 0x46EA, 0x4DC0, 0x53F3, 0x56C0, 0x5D15, 0x5E6A, 0x6580, 0xA3EA, 0xA515, 0xA640, 0xAA73, 0xB04A, 0xB2C5, 0xB3C0, 0xB9FF, 0xBE40, 0xC38C, 0xC6C8, 0xC70C, 0xC9BC, 0xD734, 0xDF00, 0xE5F3
		, 0x0033, 0x1A80, 0x1D95, 0x1EEA, 0x3480, 0x3DAA, 0x4100, 0x49AA, 0x4D40, 0x52B3, 0x5580, 0x5B55, 0x5CAA, 0x6315, 0x6480, 0xA055, 0xA1AA, 0xA6D5, 0xA7C0, 0xAB73, 0xB100, 0xBA7F, 0xBE40, 0xC34C, 0xC93C, 0xD5B4, 0xE180, 0xE733
		, 0x0000, 0x0551, 0x0A22, 0x0BB3, 0x1A80, 0x20EA, 0x2395, 0x25AA, 0x3540, 0x3C6A, 0x3D55, 0x3DAA, 0x40D5, 0x4400, 0x48EA, 0x4C80, 0x51B3, 0x5440, 0x5A95, 0x5C2A, 0x6115, 0x6200, 0x9FD5, 0xA12A, 0xA8C0, 0xACB3, 0xB180, 0xB4D5, 0xB82A, 0xB93F, 0xBE80, 0xC34C, 0xC8FC, 0xD4B4, 0xE280, 0xE8B3, 0xEC11, 0xECF3, 0xF422, 0xF591, 0xFA00
		, 0x0000, 0x0D91, 0x10F3, 0x1A37, 0x1D00, 0x21D5, 0x2240, 0x2615, 0x272A, 0x2815, 0x2900, 0x2B2A, 0x4400, 0x48AA, 0x4C00, 0x50B3, 0x5340, 0x5CD5, 0x5E2A, 0x5ED5, 0x5FC0, 0xA1D5, 0xA2EA, 0xA795, 0xA940, 0xAD73, 0xAF11, 0xB000, 0xB47F, 0xBA6A, 0xBBD5, 0xBE80, 0xC2CC, 0xC83C, 0xD374, 0xDF60, 0xE310, 0xE400, 0xE911, 0xEA40, 0xEDF3, 0xEEE2, 0xEF91, 0xF1C0
		, 0x0000, 0x1251, 0x1422, 0x1533, 0x1CB7, 0x1D33, 0x1DE2, 0x1E91, 0x1F80, 0x1FD1, 0x20A2, 0x2133, 0x23C0, 0x2751, 0x27C0, 0x2B95, 0x2D00, 0x306A, 0x4400, 0x486A, 0x4B80, 0x4FF3, 0x5240, 0xA355, 0xA46A, 0xA4D5, 0xA640, 0xAA91, 0xACB3, 0xAF40, 0xB53F, 0xBA40, 0xBF8C, 0xC7FC, 0xD2B4, 0xDD60, 0xE490, 0xE580, 0xE810, 0xE940
		, 0x0000, 0x15D1, 0x17F3, 0x2462, 0x24B3, 0x28C0, 0x2A6A, 0x2C80, 0x30EA, 0x4400, 0x47EA, 0x4AC0, 0x4F33, 0x5180, 0xA973, 0xB040, 0xB57F, 0xB7EA, 0xBA80, 0xBF8C, 0xC7BC, 0xD1B4, 0xDBE0, 0xE650, 0xE6A0, 0xEA40
		, 0x0000, 0x1891, 0x1A73, 0x283F, 0x2D40, 0x31EA, 0x4195, 0x4380, 0x476A, 0x4A40, 0x4EB3, 0x5080, 0x54D5, 0x5600, 0xAA73, 0xB0C0, 0xB555, 0xB580, 0xBBCF, 0xBD8C, 0xC73C, 0xD0F4, 0xDAA0, 0xE910, 0xEA00
		, 0x0000, 0x1AD1, 0x1C73, 0x293F, 0x2E40, 0x326A, 0x4080, 0x472A, 0x4A00, 0x4DF3, 0x4FC0, 0x546A, 0x5795, 0x5880, 0xAB33, 0xB180, 0xB251, 0xB580, 0xBC0F, 0xBDCC, 0xC6BC, 0xD074, 0xD920, 0xE740
		, 0x0000, 0x1CD1, 0x1DA2, 0x1DF3, 0x2977, 0x2AB3, 0x2EC0, 0x32EA, 0x3AD5, 0x3E2A, 0x4080, 0x46AA, 0x4940, 0x4D73, 0x4F40, 0x53EA, 0x5840, 0xABF3, 0xB5C0, 0xB785, 0xB88A, 0xB9CF, 0xBA8A, 0xBB45, 0xBBCF, 0xBDCC, 0xC6BC, 0xCF74, 0xD860, 0xE490, 0xE540
		, 0x0000, 0x1E91, 0x1F62, 0x1FB3, 0x2F80, 0x336A, 0x3AC0, 0x3E6A, 0x4340, 0x46AA, 0x4940, 0x4CB3, 0x4E80, 0x52EA, 0x56D5, 0x5780, 0xACF3, 0xB58F, 0xBDCC, 0xC63C, 0xCEF4, 0xD720, 0xE300
		, 0x0000, 0x2173, 0x3040, 0x33EA, 0x3B00, 0x3E6A, 0x4340, 0x466A, 0x4900, 0x4CD1, 0x4DC0, 0x522A, 0x5640, 0xADB3, 0xB5CF, 0xBB8C, 0xBD0D, 0xBD8C, 0xC36C, 0xC5FC, 0xCE74, 0xD620, 0xE180
		, 0x0000, 0x22B3, 0x3080, 0x342A, 0x4300, 0x462A, 0x4880, 0x5315, 0x54AA, 0x5515, 0x5580, 0xAE33, 0xB49B, 0xB54F, 0xBB8C, 0xC37C, 0xCBB8, 0xCDF4, 0xD520, 0xDFC0
		, 0x0000, 0x0F95, 0x0FC0, 0x22D1, 0x2362, 0x23B3, 0x2E91, 0x2F40, 0x31EA, 0x39FF, 0x3B80, 0x3E6A, 0x4155, 0x4300, 0x45EA, 0x4840, 0xAEB3, 0xB44F, 0xBB8C, 0xC33C, 0xCAF4, 0xD4A0, 0xDEC0
		, 0x0000, 0x0F7F, 0x1140, 0x24F3, 0x2C91, 0x2DC0, 0x322A, 0x38BF, 0x3B80, 0x3E6A, 0x4080, 0x45AA, 0x47C0, 0xADF3, 0xB48F, 0xBBCC, 0xC33C, 0xCA74, 0xD120, 0xD3B0, 0xD3A0, 0xDD80
		, 0x0000, 0x0B15, 0x0C80, 0x0F15, 0x106A, 0x1095, 0x1100, 0x2611, 0x2700, 0x2791, 0x27E2, 0x2873, 0x2A51, 0x2B00, 0x3155, 0x322A, 0x38FF, 0x3BC0, 0x3E6A, 0x4080, 0x45AA, 0x47C0, 0xADB3, 0xB50F, 0xBC0C, 0xC2FC, 0xC9B8, 0xCA34, 0xD0A0, 0xDBD0, 0xDC40, 0xE695, 0xE780
		, 0x0000, 0x0AFF, 0x0CC0, 0x2891, 0x2900, 0x30AA, 0x3900, 0x3EAA, 0x4780, 0xAE33, 0xB50F, 0xBC0C, 0xC2FC, 0xC9B4, 0xD020, 0xDB40, 0xE67F, 0xE800
		, 0x0000, 0x0B55, 0x0C80, 0x11D5, 0x1280, 0x312A, 0x3940, 0x3C15, 0x3C40, 0x3EAA, 0x423B, 0x422A, 0x4740, 0xAEB3, 0xB58F, 0xBC4C, 0xC2FC, 0xC974, 0xCFA0, 0xD7C0, 0xD9A0, 0xDA10, 0xDA40, 0xE695, 0xE780
		, 0x0000, 0x113F, 0x12C0, 0x2F95, 0x306A, 0x3EF3, 0x426A, 0x4480, 0xAF73, 0xB5CF, 0xBC4C, 0xC2BC, 0xC974, 0xCF20, 0xD700
		, 0x0000, 0x0D3F, 0x0DEA, 0x0EC0, 0x1195, 0x1280, 0x2FEA, 0x3EF3, 0x426A, 0x4480, 0x6515, 0x6580, 0xAFB3, 0xB64F, 0xBC4C, 0xC2BC, 0xC8F4, 0xCEE0, 0xD600
		, 0x0000, 0x0CD5, 0x0DEA, 0x0E55, 0x0E80, 0x30AA, 0x3455, 0x3600, 0x38EA, 0x3EF3, 0x4240, 0x6395, 0x64FF, 0x6640, 0x90D5, 0x9100, 0xB073, 0xB64F, 0xBC8C, 0xC2BC, 0xC8B4, 0xCE60, 0xD540
		, 0x0000, 0x30EA, 0x3155, 0x3240, 0x392A, 0x3A55, 0x3BEA, 0x3C15, 0x3CEA, 0x3D95, 0x3EE2, 0x4200, 0x63FF, 0x6595, 0x6600, 0x90BF, 0x9200, 0xB0B3, 0xB6CF, 0xBC8C, 0xC2BC, 0xC874, 0xCDE0, 0xD4C0
		, 0x0000, 0x6415, 0x6480, 0x9055, 0x912A, 0x91C0, 0xB133, 0xB6CF, 0xBC8C, 0xC27C, 0xC874, 0xCD60, 0xD440
		, 0x0000, 0xB1B3, 0xB74F, 0xBCCC, 0xC27C, 0xC7B8, 0xC834, 0xCD60, 0xD3C0
		, 0x0000, 0xB1F3, 0xB74F, 0xBCCC, 0xC27C, 0xC7F4, 0xCCE0, 0xD340
		, 0x0000, 0xB233, 0xB78F, 0xBD0C, 0xC27C, 0xC7B4, 0xCC60, 0xD2C0
		, 0x0000, 0xB273, 0xB7CF, 0xBD0C, 0xC27C, 0xC774, 0xCC20, 0xD240
		, 0x0000, 0xB2B3, 0xB7CF, 0xBD8C, 0xBE0E, 0xBE4C, 0xC26C, 0xC37C, 0xC774, 0xCC20, 0xD200
	}; // 1634 bytes

	const uint16_t row_ends[] PROGMEM {		
		0x0004, 0x0014, 0x0025, 0x003D, 0x0055, 0x0070, 0x008F, 0x00A9, 
		0x00C4, 0x00E8, 0x0104, 0x012D, 0x0159, 0x0181, 0x019B, 0x01B4, 
		0x01CC, 0x01EB, 0x0202, 0x0219, 0x022D, 0x0244, 0x025A, 0x027B, 
		0x028D, 0x02A6, 0x02B5, 0x02C8, 0x02DF, 0x02F7, 0x0304, 0x030D, 
		0x0315, 0x031D, 0x0325, 0x0330
	}; // 72 bytes
}

class NyanCat1 : public Image {
protected:
	inline uint16_t get_arc(uint16_t i) override {
		return pgm_read_word(&NyanCat1_data::arcs[i]);
	}

	inline uint16_t get_row_end(uint8_t row_index) override {
		return pgm_read_word(&NyanCat1_data::row_ends[row_index]);
	}

protected:
	inline uint16_t get_angle(uint16_t arc) override {
		return arc & 0xFFC0;
	}

	inline uint32_t get_color(uint16_t arc) override {
		return ((uint32_t)(arc & 0x0030) << 18) + ((uint32_t)(arc & 0x000C) << 12) + ((arc & 0x0003) << 6);
	}
};
