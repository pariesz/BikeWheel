#pragma once
#ifdef SIMULATION
#include "Arduino_Mock.h"
#else
#include <avr/pgmspace.h>
#endif

#include "../Image.h"

namespace roll2_data {
	const uint16_t arcs[] PROGMEM {
		  0x0001, 0x099A, 0x0B30, 0xE0CA, 0xE261
		, 0x0001, 0x0DDA, 0x0F50, 0xDCFA, 0xDE71
		, 0x0003, 0x0499, 0x11C2, 0x1310, 0xD9D2, 0xDA79, 0xF623
		, 0x0003, 0x05F9, 0x14FA, 0x1590, 0xD73A, 0xD7D1, 0xF06B
		, 0x0003, 0x0741, 0x16EA, 0x1778, 0xD582, 0xD611, 0xECFB
		, 0x0003, 0x09C9, 0x18C0, 0xD422, 0xD4A1, 0xEA53
		, 0x0003, 0x0A11, 0x196A, 0x19E0, 0xD369, 0xE883
		, 0x0001, 0x039B, 0x0909, 0x1A40, 0xD2B2, 0xD321, 0xE713, 0xFDB9
		, 0x0001, 0x1A50, 0xD291, 0xE683, 0xF781
		, 0x0001, 0x1A60, 0xD261, 0xE79B, 0xF4C9
		, 0x0001, 0x1A48, 0xD249, 0xE863, 0xF309
		, 0x0001, 0x19F8, 0xD281, 0xE8E3, 0xF1E9
		, 0x0001, 0x1958, 0xD319, 0xE963, 0xF249
		, 0x0001, 0x18A2, 0x18F8, 0xD3A1, 0xE9FB, 0xF521
		, 0x0003, 0x0879, 0x1828, 0xD412, 0xD461, 0xEA5B, 0xF191, 0xF1E3
		, 0x0003, 0x0991, 0x1760, 0xD4D2, 0xD521, 0xEA1B, 0xEF81, 0xF06A, 0xF400, 0xF831, 0xF883
		, 0x0003, 0x09D1, 0x1690, 0xD5C1, 0xE96B, 0xEE59, 0xEEEA, 0xF2F8, 0xF752, 0xF831, 0xF87B
		, 0x0003, 0x0731, 0x15A0, 0xD661, 0xE86B, 0xEDF9, 0xEE3A, 0xF220, 0xF52A, 0xF761, 0xF7F3
		, 0x0003, 0x0221, 0x14C0, 0xD6FA, 0xD739, 0xE77B, 0xEC49, 0xEC8A, 0xECD0, 0xEE22, 0xF198, 0xF2F2, 0xF6A9, 0xF733
		, 0x0001, 0x13D8, 0xD7B9, 0xE673, 0xEB19, 0xEB58, 0xEDEA, 0xF5E9, 0xF673, 0xFE31
		, 0x0001, 0x12A2, 0x12E0, 0xD83A, 0xD879, 0xE563, 0xEA21, 0xEA60, 0xEE1A, 0xF310, 0xF512, 0xF551, 0xF5CB, 0xFCC1
		, 0x0001, 0x11BA, 0x11F8, 0xD8EA, 0xD929, 0xE433, 0xE939, 0xE970, 0xEE82, 0xF198, 0xF402, 0xF441, 0xF4BB, 0xFBE9
		, 0x0001, 0x10C2, 0x1100, 0xDA02, 0xDA41, 0xDABB, 0xE839, 0xE87A, 0xE8B0, 0xEEFA, 0xF188, 0xF2F1, 0xF3A3, 0xFAE1
		, 0x0001, 0x0FC2, 0x0FF8, 0xDA9A, 0xDB11, 0xDB83, 0xE7AA, 0xE7E8, 0xF1D2, 0xF209, 0xF27B, 0xF979
		, 0x0001, 0x0ED2, 0x0F08, 0xD92A, 0xDC71, 0xDDC3, 0xE481, 0xE60B, 0xE6E9, 0xE720, 0xF129, 0xF19B, 0xF5F9
		, 0x0001, 0x0E02, 0x0E38, 0xD292, 0xDF18, 0xDFF2, 0xE059, 0xE0CB, 0xE1A1, 0xE2EA, 0xE680, 0xF0EA, 0xF30B, 0xF4F1
		, 0x0001, 0x0CF2, 0x0D28, 0xD2BA, 0xDC60, 0xE18A, 0xE610, 0xF339, 0xF373, 0xF479
		, 0x0001, 0x0B92, 0x0BC8, 0xD3A2, 0xD7D0, 0xD802, 0xD838, 0xE19A, 0xE598, 0xF301, 0xF333, 0xF431
		, 0x0001, 0x03E2, 0x0861, 0x09BA, 0x0A20, 0xE162, 0xE4E0, 0xEFD2, 0xF001, 0xF060, 0xF25A, 0xF289, 0xF2BB, 0xF3B1
		, 0x0001, 0x039A, 0x0978, 0xE142, 0xE450, 0xF011, 0xF043, 0xF0D1, 0xF193, 0xF3A9, 0xF83A, 0xF868, 0xF9BA, 0xFA49
		, 0x0001, 0x0352, 0x09C0, 0xE102, 0xE3C0, 0xF053, 0xF3A1, 0xF7B2, 0xF7E0, 0xFAD1
		, 0x0001, 0x033A, 0x09E8, 0xE0CA, 0xE350, 0xF0AA, 0xF0DB, 0xF219, 0xF303, 0xF3E9, 0xF7E0, 0xFAC1
		, 0x0001, 0x02FA, 0x09A8, 0xE05A, 0xE2A8, 0xF112, 0xF439, 0xF842, 0xF8F8, 0xF922, 0xFA31
		, 0x0000, 0x00AA, 0x05F8, 0x080A, 0x0838, 0x0862, 0x08B8, 0xDFA2, 0xE230, 0xF0EA, 0xF481, 0xFD42, 0xFDF0
		, 0x0000, 0x03DA, 0x0400, 0x0482, 0x04B0, 0xE022, 0xE1A0, 0xF192, 0xF468, 0xF772, 0xF899, 0xF8CA, 0xF919, 0xF972, 0xF9A1, 0xF9F2, 0xFBA0
		, 0x0000
	}; // 684 bytes

	const uint16_t row_ends[] PROGMEM {		
		0x0004, 0x0009, 0x0010, 0x0017, 0x001E, 0x0024, 0x002A, 0x0032, 
		0x0037, 0x003C, 0x0041, 0x0046, 0x004B, 0x0051, 0x0059, 0x0064, 
		0x006F, 0x007A, 0x0088, 0x0092, 0x00A0, 0x00AE, 0x00BC, 0x00C8, 
		0x00D5, 0x00E3, 0x00ED, 0x00F9, 0x0107, 0x0115, 0x011F, 0x012B, 
		0x0136, 0x0143, 0x0154, 0x0155
	}; // 72 bytes

	const uint32_t colors[] PROGMEM {		
		0x00000000, 0x00FFCC00, 0x00FF5555, 0x00FFFFFF
	}; // 16 bytes
}

class roll2 : public Image {
protected:
	inline uint16_t get_arc(uint16_t i) override {
		return pgm_read_word(&roll2_data::arcs[i]);
	}

	inline uint16_t get_row_end(uint8_t row_index) override {
		return pgm_read_word(&roll2_data::row_ends[row_index]);
	}

protected:
	const uint16_t angle_mask = 0xFFF8;
	const uint16_t color_mask = 0x0007;

	inline uint16_t get_angle(uint16_t arc) override {
		return arc & angle_mask;
	}

	inline uint32_t get_color(uint16_t arc) override {
		return pgm_read_dword(&(roll2_data::colors[arc & color_mask]));
	}
};
