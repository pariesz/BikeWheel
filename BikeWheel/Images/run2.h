#pragma once
#ifdef SIMULATION
#include "Arduino_Mock.h"
#else
#include <avr/pgmspace.h>
#endif

#include "../Image.h"

namespace run2_data {
	const uint16_t arcs[] PROGMEM {
		  0x0000
		, 0x0000
		, 0x0000
		, 0x0000, 0x744A, 0x76B1, 0x8F4A, 0x9248
		, 0x0000, 0x6D8A, 0x6EA9, 0xA06A, 0xA330
		, 0x0000, 0x694A, 0x6A51, 0xAAD2, 0xABD8
		, 0x0000, 0x6692, 0x6711, 0x7E8B, 0x87A9, 0xB0E2, 0xB160
		, 0x0000, 0x6492, 0x6509, 0x7D83, 0x8861, 0xB452, 0xB538
		, 0x0000, 0x62EA, 0x6351, 0x7DAB, 0x89F9, 0xB6FA, 0xB760
		, 0x0000, 0x6261, 0x7E63, 0x8E01, 0xB932, 0xB999, 0xBA00
		, 0x0000, 0x6182, 0x61E1, 0x7E7B, 0x90C1, 0xBB08
		, 0x0000, 0x6122, 0x6179, 0x7EBB, 0x9181, 0xBB62, 0xC240
		, 0x0000, 0x60A1, 0x7ECB, 0x9041, 0xB90A, 0xC3A8
		, 0x0000, 0x604A, 0x6099, 0x7E83, 0x8CA1, 0x9D13, 0x9F09, 0xB802, 0xC2E0
		, 0x0000, 0x6001, 0x7E6B, 0x8B99, 0x9AAB, 0xA281, 0xB732, 0xC140
		, 0x0000, 0x5FE9, 0x7E83, 0x8B61, 0x9A63, 0xA491, 0xB6DA, 0xC158
		, 0x0000, 0x5FB9, 0x7EB3, 0x8B21, 0x9AC3, 0xA699, 0xB9B2, 0xC1C8
		, 0x0000, 0x5FB1, 0x7EC3, 0x8B81, 0x9B53, 0xA7C9, 0xBC0A, 0xBC51, 0xBD6A, 0xC150
		, 0x0000, 0x5FA2, 0x5FE1, 0x69C3, 0x6F59, 0x7ECB, 0x8B91, 0x9C5B, 0xA859, 0xBCDA, 0xC010
		, 0x0000, 0x6002, 0x6041, 0x64E3, 0x7081, 0x7EF3, 0x8C21, 0x9DEB, 0xA989, 0xBCA2, 0xBE30
		, 0x0000, 0x60AA, 0x6129, 0x636B, 0x7111, 0x7F83, 0x8D29, 0x9E93, 0xAAF9, 0xBC22, 0xBD20
		, 0x0000, 0x646A, 0x64E9, 0x65DB, 0x7219, 0x7F83, 0x8FD1, 0x9E73, 0xAC59, 0xBB72, 0xBBA8
		, 0x0000, 0x676A, 0x67E1, 0x690B, 0x7299, 0x7F6B, 0x9421, 0x9D3B, 0xAD11, 0xBB4A, 0xBB80
		, 0x0000, 0x6A0A, 0x6A41, 0x6B2B, 0x7381, 0x7EFB, 0x8669, 0x9173, 0x9301, 0x9B93, 0xA1A9, 0xA57A, 0xA5F0, 0xA69A, 0xA6D1, 0xA74B, 0xACE9, 0xBB18
		, 0x0000, 0x6C29, 0x6FDB, 0x7589, 0x7D9B, 0x8261, 0x83B2, 0x8458, 0x93A2, 0x9BE9, 0x9C92, 0x9D01, 0x9D72, 0x9E80, 0x9EBA, 0x9EF1, 0xA07A, 0xA510, 0xA7E1, 0xA853, 0xACB1, 0xB488, 0xB682, 0xB6B9, 0xBAE0
		, 0x0000, 0x6C42, 0x7081, 0x71FB, 0x7749, 0x7AB3, 0x7F91, 0x80DA, 0x8108, 0x9572, 0x9AF0, 0x9EC2, 0xA480, 0xA8C2, 0xA8F1, 0xA92B, 0xAC91, 0xB468, 0xB6FA, 0xB731, 0xBA90
		, 0x0000, 0x6C72, 0x7269, 0x733B, 0x7CE9, 0x7E22, 0x7E58, 0x95D2, 0x9A50, 0x9EAA, 0xA400, 0xA991, 0xA9C3, 0xACD9, 0xB47A, 0xB4A8, 0xB6F1, 0xBA0A, 0xBA38
		, 0x0000, 0x6C82, 0x7349, 0x7383, 0x7A49, 0x7BB2, 0x7BE0, 0x957A, 0x99A8, 0x9E7A, 0xA340, 0xAA12, 0xAA41, 0xAA73, 0xADA9, 0xB572, 0xB5A8, 0xB609, 0xB942, 0xB970
		, 0x0000, 0x6C62, 0x72D0, 0x733A, 0x7431, 0x79AA, 0x7A08, 0x9492, 0x98D8, 0x9E52, 0xA2C8, 0xAACA, 0xAAF9, 0xAB2B, 0xACB8, 0xAE1A, 0xAE49, 0xB83A, 0xB8A0
		, 0x0000, 0x6602, 0x7190, 0x746A, 0x7AB0, 0x7C32, 0x7C60, 0x7C92, 0x8180, 0x8E0A, 0x9810, 0x9E22, 0xA220, 0xAB9A, 0xABC9, 0xAC2B, 0xAC91, 0xACC2, 0xACF0, 0xAED1, 0xAF03, 0xAFC9, 0xAFFB, 0xB029, 0xB72A, 0xB758
		, 0x0000, 0x6482, 0x7020, 0x75DA, 0x8350, 0x8DA2, 0x9708, 0x9DE2, 0xA160, 0xACA2, 0xACD1, 0xAD28, 0xAF31, 0xAF63, 0xB289, 0xB2BB, 0xB2E1, 0xB692, 0xB6C0
		, 0x0000, 0x647A, 0x6D80, 0x6DB2, 0x6DD8, 0x776A, 0x8328, 0x8E52, 0x9478, 0x9DAA, 0xA0E8, 0xAF5B, 0xB239, 0xB2CA, 0xB5A9, 0xB608
		, 0x0000, 0x64AA, 0x68B8, 0x7A1A, 0x7E50, 0x9D6A, 0xA148, 0xAFB2, 0xAFE1, 0xB22A, 0xB580
		, 0x0000, 0x6502, 0x6848, 0x9DE2, 0xA1F8, 0xB26A, 0xB4F8
		, 0x0000, 0x657A, 0x6828, 0x9E5A, 0xA208
		, 0x0000, 0x65CA, 0x6840, 0x9EEA, 0xA1B0
	}; // 748 bytes

	const uint16_t row_ends[] PROGMEM {		
		0x0000, 0x0001, 0x0002, 0x0007, 0x000C, 0x0011, 0x0018, 0x001F, 
		0x0026, 0x002D, 0x0033, 0x003A, 0x0040, 0x0049, 0x0051, 0x0059, 
		0x0061, 0x006B, 0x0076, 0x0081, 0x008C, 0x0097, 0x00A2, 0x00B4, 
		0x00CD, 0x00E2, 0x00F5, 0x0109, 0x011C, 0x0136, 0x0149, 0x0159, 
		0x0164, 0x016B, 0x0170, 0x0175
	}; // 72 bytes

	const uint32_t colors[] PROGMEM {		
		0x00000000, 0x00FFCC00, 0x00FF5555, 0x00FFFFFF
	}; // 16 bytes
}

class run2 : public Image {
protected:
	inline uint16_t get_arc(uint16_t i) override {
		return pgm_read_word(&run2_data::arcs[i]);
	}

	inline uint16_t get_row_end(uint8_t row_index) override {
		return pgm_read_word(&run2_data::row_ends[row_index]);
	}

protected:
	const uint16_t angle_mask = 0xFFF8;
	const uint16_t color_mask = 0x0007;

	inline uint16_t get_angle(uint16_t arc) override {
		return arc & angle_mask;
	}

	inline uint32_t get_color(uint16_t arc) override {
		return pgm_read_dword(&(run2_data::colors[arc & color_mask]));
	}
};
